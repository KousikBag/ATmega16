
Practical_16.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000023e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000292  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000060  00000000  00000000  000002b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000461  00000000  00000000  00000312  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000015e  00000000  00000000  00000773  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000359  00000000  00000000  000008d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000070  00000000  00000000  00000c2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000105  00000000  00000000  00000c9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000001ce  00000000  00000000  00000da1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000090  00000000  00000000  00000f6f  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e3       	ldi	r30, 0x3E	; 62
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ca 00 	call	0x194	; 0x194 <main>
  8a:	0c 94 1d 01 	jmp	0x23a	; 0x23a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lcd_command>:
	lcd_command(0x0c);
	lcd_command(0x01);
}

void lcd_command(unsigned char com)	   //command function
{
  92:	28 2f       	mov	r18, r24
  94:	20 7f       	andi	r18, 0xF0	; 240
  96:	25 bb       	out	0x15, r18	; 21

	lcd = com & 0xF0;	//send higher bit	

	lcd &= ~(1<<rs); 	//rs =0
  98:	a8 98       	cbi	0x15, 0	; 21
	lcd &= ~(1<<rw);	//rw =0	
  9a:	a9 98       	cbi	0x15, 1	; 21
	lcd |=(1<<en);		//en =1		
  9c:	aa 9a       	sbi	0x15, 2	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9e:	20 ed       	ldi	r18, 0xD0	; 208
  a0:	37 e0       	ldi	r19, 0x07	; 7
  a2:	f9 01       	movw	r30, r18
  a4:	31 97       	sbiw	r30, 0x01	; 1
  a6:	f1 f7       	brne	.-4      	; 0xa4 <lcd_command+0x12>
	_delay_ms(1);
	lcd &= ~(1<<en);	//en =0	
  a8:	aa 98       	cbi	0x15, 2	; 21
  aa:	f9 01       	movw	r30, r18
  ac:	31 97       	sbiw	r30, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <lcd_command+0x1a>
	_delay_ms(1);

	lcd = (com<<4) & 0xF0;  //send lower bit	
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	44 e0       	ldi	r20, 0x04	; 4
  b4:	88 0f       	add	r24, r24
  b6:	99 1f       	adc	r25, r25
  b8:	4a 95       	dec	r20
  ba:	e1 f7       	brne	.-8      	; 0xb4 <lcd_command+0x22>
  bc:	85 bb       	out	0x15, r24	; 21

	lcd &= ~(1<<rs); 	//rs =0		
  be:	a8 98       	cbi	0x15, 0	; 21
	lcd &= ~(1<<rw);	//rw =0
  c0:	a9 98       	cbi	0x15, 1	; 21
	lcd |=(1<<en);		//en =1		
  c2:	aa 9a       	sbi	0x15, 2	; 21
  c4:	c9 01       	movw	r24, r18
  c6:	01 97       	sbiw	r24, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <lcd_command+0x34>
	_delay_ms(1);
	lcd &= ~(1<<en);	//en =0
  ca:	aa 98       	cbi	0x15, 2	; 21
  cc:	c9 01       	movw	r24, r18
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <lcd_command+0x3c>
	_delay_ms(1);
}
  d2:	08 95       	ret

000000d4 <lcd_init>:
#define lcd PORTC
#define rs 0
#define rw 1
#define en 2
void lcd_init()						//lcd initialization function
{
  d4:	82 e0       	ldi	r24, 0x02	; 2
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
	lcd_command(0x02);
 	lcd_command(0x28);
  dc:	88 e2       	ldi	r24, 0x28	; 40
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
	lcd_command(0x06);
  e4:	86 e0       	ldi	r24, 0x06	; 6
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
	lcd_command(0x0c);
  ec:	8c e0       	ldi	r24, 0x0C	; 12
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
	lcd_command(0x01);
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
}
  fc:	08 95       	ret

000000fe <lcd_data>:
	lcd &= ~(1<<en);	//en =0
	_delay_ms(1);
}

void lcd_data(unsigned char value)   //data function
{
  fe:	28 2f       	mov	r18, r24
 100:	20 7f       	andi	r18, 0xF0	; 240
 102:	25 bb       	out	0x15, r18	; 21

	lcd =value & 0xF0;	 //send higher bit	

	lcd |= (1<<rs); 	//rs =1	
 104:	a8 9a       	sbi	0x15, 0	; 21
	lcd &= ~(1<<rw);	//rw =0	
 106:	a9 98       	cbi	0x15, 1	; 21
	lcd |=(1<<en);		//en =1		
 108:	aa 9a       	sbi	0x15, 2	; 21
 10a:	20 ed       	ldi	r18, 0xD0	; 208
 10c:	37 e0       	ldi	r19, 0x07	; 7
 10e:	f9 01       	movw	r30, r18
 110:	31 97       	sbiw	r30, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <lcd_data+0x12>
	_delay_ms(1);
	lcd &= ~(1<<en);	//en =0	
 114:	aa 98       	cbi	0x15, 2	; 21
 116:	f9 01       	movw	r30, r18
 118:	31 97       	sbiw	r30, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <lcd_data+0x1a>
	_delay_ms(1);


	lcd =(value<<4) & 0xF0;	 //send lower bit
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	54 e0       	ldi	r21, 0x04	; 4
 120:	88 0f       	add	r24, r24
 122:	99 1f       	adc	r25, r25
 124:	5a 95       	dec	r21
 126:	e1 f7       	brne	.-8      	; 0x120 <lcd_data+0x22>
 128:	85 bb       	out	0x15, r24	; 21

	lcd |= (1<<rs); 	//rs =1	
 12a:	a8 9a       	sbi	0x15, 0	; 21
	lcd &= ~(1<<rw);	//rw =0
 12c:	a9 98       	cbi	0x15, 1	; 21
	lcd |=(1<<en);		//en =1		
 12e:	aa 9a       	sbi	0x15, 2	; 21
 130:	c9 01       	movw	r24, r18
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <lcd_data+0x34>
	_delay_ms(1);		
	lcd &= ~(1<<en);	//en =0	
 136:	aa 98       	cbi	0x15, 2	; 21
 138:	c9 01       	movw	r24, r18
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <lcd_data+0x3c>
	_delay_ms(1);
	
}
 13e:	08 95       	ret

00000140 <lcd_string>:


void lcd_string(unsigned char *a)    //lcd string function
{
 140:	cf 93       	push	r28
 142:	df 93       	push	r29
 144:	ec 01       	movw	r28, r24
 146:	03 c0       	rjmp	.+6      	; 0x14e <lcd_string+0xe>
    while(*a!='\0')
	{
	 lcd_data(*a);
 148:	0e 94 7f 00 	call	0xfe	; 0xfe <lcd_data>
	 a++;
 14c:	21 96       	adiw	r28, 0x01	; 1
}


void lcd_string(unsigned char *a)    //lcd string function
{
    while(*a!='\0')
 14e:	88 81       	ld	r24, Y
 150:	88 23       	and	r24, r24
 152:	d1 f7       	brne	.-12     	; 0x148 <lcd_string+0x8>
	{
	 lcd_data(*a);
	 a++;
    }
}
 154:	df 91       	pop	r29
 156:	cf 91       	pop	r28
 158:	08 95       	ret

0000015a <lcd_num>:

void lcd_num(unsigned int num)
{
 15a:	cf 93       	push	r28
 15c:	df 93       	push	r29
 15e:	ec 01       	movw	r28, r24
	lcd_command(0x04);
 160:	84 e0       	ldi	r24, 0x04	; 4
 162:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
 166:	0e c0       	rjmp	.+28     	; 0x184 <lcd_num+0x2a>
	unsigned int i;
	while(num!=0)
	{
		i=num%10;
		lcd_data(i+48);
 168:	ce 01       	movw	r24, r28
 16a:	6a e0       	ldi	r22, 0x0A	; 10
 16c:	70 e0       	ldi	r23, 0x00	; 0
 16e:	0e 94 09 01 	call	0x212	; 0x212 <__udivmodhi4>
 172:	80 5d       	subi	r24, 0xD0	; 208
 174:	0e 94 7f 00 	call	0xfe	; 0xfe <lcd_data>
		num=num/10;
 178:	ce 01       	movw	r24, r28
 17a:	6a e0       	ldi	r22, 0x0A	; 10
 17c:	70 e0       	ldi	r23, 0x00	; 0
 17e:	0e 94 09 01 	call	0x212	; 0x212 <__udivmodhi4>
 182:	eb 01       	movw	r28, r22

void lcd_num(unsigned int num)
{
	lcd_command(0x04);
	unsigned int i;
	while(num!=0)
 184:	20 97       	sbiw	r28, 0x00	; 0
 186:	81 f7       	brne	.-32     	; 0x168 <lcd_num+0xe>
	{
		i=num%10;
		lcd_data(i+48);
		num=num/10;
	}
	lcd_command(0x06);
 188:	86 e0       	ldi	r24, 0x06	; 6
 18a:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
}
 18e:	df 91       	pop	r29
 190:	cf 91       	pop	r28
 192:	08 95       	ret

00000194 <main>:


int main()
{
 194:	ef 92       	push	r14
 196:	ff 92       	push	r15
 198:	0f 93       	push	r16
 19a:	1f 93       	push	r17
 19c:	cf 93       	push	r28
 19e:	df 93       	push	r29
  DDRC=0xFF;
 1a0:	8f ef       	ldi	r24, 0xFF	; 255
 1a2:	84 bb       	out	0x14, r24	; 20
  lcd_init();
 1a4:	0e 94 6a 00 	call	0xd4	; 0xd4 <lcd_init>
 1a8:	88 ee       	ldi	r24, 0xE8	; 232
 1aa:	93 e0       	ldi	r25, 0x03	; 3
 1ac:	28 ec       	ldi	r18, 0xC8	; 200
 1ae:	30 e0       	ldi	r19, 0x00	; 0
 1b0:	f9 01       	movw	r30, r18
 1b2:	31 97       	sbiw	r30, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <main+0x1e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1b6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1b8:	d9 f7       	brne	.-10     	; 0x1b0 <main+0x1c>
 1ba:	c0 e0       	ldi	r28, 0x00	; 0
 1bc:	d0 e0       	ldi	r29, 0x00	; 0
 1be:	08 ec       	ldi	r16, 0xC8	; 200
 1c0:	10 e0       	ldi	r17, 0x00	; 0
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1c2:	60 e2       	ldi	r22, 0x20	; 32
 1c4:	e6 2e       	mov	r14, r22
 1c6:	6e e4       	ldi	r22, 0x4E	; 78
 1c8:	f6 2e       	mov	r15, r22
 1ca:	20 c0       	rjmp	.+64     	; 0x20c <main+0x78>
 1cc:	f8 01       	movw	r30, r16
 1ce:	31 97       	sbiw	r30, 0x01	; 1
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <main+0x3a>
 1d2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1d4:	d9 f7       	brne	.-10     	; 0x1cc <main+0x38>
  while(1)
  {
    for(int i=0;i<=15;i++)
	{
	_delay_ms(50);
    lcd_command(0x80+i);
 1d6:	9e 01       	movw	r18, r28
 1d8:	20 58       	subi	r18, 0x80	; 128
 1da:	82 2f       	mov	r24, r18
 1dc:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
	lcd_data('K');
 1e0:	8b e4       	ldi	r24, 0x4B	; 75
 1e2:	0e 94 7f 00 	call	0xfe	; 0xfe <lcd_data>
 1e6:	80 e1       	ldi	r24, 0x10	; 16
 1e8:	97 e2       	ldi	r25, 0x27	; 39
 1ea:	f8 01       	movw	r30, r16
 1ec:	31 97       	sbiw	r30, 0x01	; 1
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <main+0x58>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1f0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1f2:	d9 f7       	brne	.-10     	; 0x1ea <main+0x56>
	_delay_ms(1000);
	lcd_command(0x01);
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
 1fa:	c7 01       	movw	r24, r14
 1fc:	01 97       	sbiw	r24, 0x01	; 1
 1fe:	f1 f7       	brne	.-4      	; 0x1fc <main+0x68>
  DDRC=0xFF;
  lcd_init();
  _delay_ms(100);
  while(1)
  {
    for(int i=0;i<=15;i++)
 200:	21 96       	adiw	r28, 0x01	; 1
 202:	c0 31       	cpi	r28, 0x10	; 16
 204:	d1 05       	cpc	r29, r1
 206:	14 f0       	brlt	.+4      	; 0x20c <main+0x78>
 208:	c0 e0       	ldi	r28, 0x00	; 0
 20a:	d0 e0       	ldi	r29, 0x00	; 0
 20c:	84 ef       	ldi	r24, 0xF4	; 244
 20e:	91 e0       	ldi	r25, 0x01	; 1
 210:	dd cf       	rjmp	.-70     	; 0x1cc <main+0x38>

00000212 <__udivmodhi4>:
 212:	aa 1b       	sub	r26, r26
 214:	bb 1b       	sub	r27, r27
 216:	51 e1       	ldi	r21, 0x11	; 17
 218:	07 c0       	rjmp	.+14     	; 0x228 <__udivmodhi4_ep>

0000021a <__udivmodhi4_loop>:
 21a:	aa 1f       	adc	r26, r26
 21c:	bb 1f       	adc	r27, r27
 21e:	a6 17       	cp	r26, r22
 220:	b7 07       	cpc	r27, r23
 222:	10 f0       	brcs	.+4      	; 0x228 <__udivmodhi4_ep>
 224:	a6 1b       	sub	r26, r22
 226:	b7 0b       	sbc	r27, r23

00000228 <__udivmodhi4_ep>:
 228:	88 1f       	adc	r24, r24
 22a:	99 1f       	adc	r25, r25
 22c:	5a 95       	dec	r21
 22e:	a9 f7       	brne	.-22     	; 0x21a <__udivmodhi4_loop>
 230:	80 95       	com	r24
 232:	90 95       	com	r25
 234:	bc 01       	movw	r22, r24
 236:	cd 01       	movw	r24, r26
 238:	08 95       	ret

0000023a <_exit>:
 23a:	f8 94       	cli

0000023c <__stop_program>:
 23c:	ff cf       	rjmp	.-2      	; 0x23c <__stop_program>
