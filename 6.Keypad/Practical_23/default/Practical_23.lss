
Practical_23.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003e8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000003e8  0000045c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  00000464  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000007b  00000000  00000000  00000484  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000061d  00000000  00000000  000004ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000175  00000000  00000000  00000b1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000005da  00000000  00000000  00000c91  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000090  00000000  00000000  0000126c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000011b  00000000  00000000  000012fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000356  00000000  00000000  00001417  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  0000176d  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ee       	ldi	r30, 0xE8	; 232
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 36       	cpi	r26, 0x68	; 104
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 81 01 	call	0x302	; 0x302 <main>
  8a:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <lcd_command>:
	lcd_command(0x0c);
	lcd_command(0x01);
}

void lcd_command(unsigned char com)	   //command function
{
  92:	28 2f       	mov	r18, r24
  94:	20 7f       	andi	r18, 0xF0	; 240
  96:	25 bb       	out	0x15, r18	; 21

	lcd = com & 0xF0;	//send higher bit	

	lcd &= ~(1<<rs); 	//rs =0
  98:	a8 98       	cbi	0x15, 0	; 21
	lcd &= ~(1<<rw);	//rw =0	
  9a:	a9 98       	cbi	0x15, 1	; 21
	lcd |=(1<<en);		//en =1		
  9c:	aa 9a       	sbi	0x15, 2	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9e:	20 ed       	ldi	r18, 0xD0	; 208
  a0:	37 e0       	ldi	r19, 0x07	; 7
  a2:	f9 01       	movw	r30, r18
  a4:	31 97       	sbiw	r30, 0x01	; 1
  a6:	f1 f7       	brne	.-4      	; 0xa4 <lcd_command+0x12>
	_delay_ms(1);
	lcd &= ~(1<<en);	//en =0	
  a8:	aa 98       	cbi	0x15, 2	; 21
  aa:	f9 01       	movw	r30, r18
  ac:	31 97       	sbiw	r30, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <lcd_command+0x1a>
	_delay_ms(1);

	lcd = (com<<4) & 0xF0;  //send lower bit	
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	44 e0       	ldi	r20, 0x04	; 4
  b4:	88 0f       	add	r24, r24
  b6:	99 1f       	adc	r25, r25
  b8:	4a 95       	dec	r20
  ba:	e1 f7       	brne	.-8      	; 0xb4 <lcd_command+0x22>
  bc:	85 bb       	out	0x15, r24	; 21

	lcd &= ~(1<<rs); 	//rs =0		
  be:	a8 98       	cbi	0x15, 0	; 21
	lcd &= ~(1<<rw);	//rw =0
  c0:	a9 98       	cbi	0x15, 1	; 21
	lcd |=(1<<en);		//en =1		
  c2:	aa 9a       	sbi	0x15, 2	; 21
  c4:	c9 01       	movw	r24, r18
  c6:	01 97       	sbiw	r24, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <lcd_command+0x34>
	_delay_ms(1);
	lcd &= ~(1<<en);	//en =0
  ca:	aa 98       	cbi	0x15, 2	; 21
  cc:	c9 01       	movw	r24, r18
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <lcd_command+0x3c>
	_delay_ms(1);
}
  d2:	08 95       	ret

000000d4 <lcd_init>:
#define lcd PORTC
#define rs 0
#define rw 1
#define en 2
void lcd_init()						//lcd initialization function
{
  d4:	82 e0       	ldi	r24, 0x02	; 2
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
	lcd_command(0x02);
 	lcd_command(0x28);
  dc:	88 e2       	ldi	r24, 0x28	; 40
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
	lcd_command(0x06);
  e4:	86 e0       	ldi	r24, 0x06	; 6
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
	lcd_command(0x0c);
  ec:	8c e0       	ldi	r24, 0x0C	; 12
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
	lcd_command(0x01);
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
}
  fc:	08 95       	ret

000000fe <lcd_data>:
	lcd &= ~(1<<en);	//en =0
	_delay_ms(1);
}

void lcd_data(unsigned char value)   //data function
{
  fe:	28 2f       	mov	r18, r24
 100:	20 7f       	andi	r18, 0xF0	; 240
 102:	25 bb       	out	0x15, r18	; 21

	lcd =value & 0xF0;	 //send higher bit	

	lcd |= (1<<rs); 	//rs =1	
 104:	a8 9a       	sbi	0x15, 0	; 21
	lcd &= ~(1<<rw);	//rw =0	
 106:	a9 98       	cbi	0x15, 1	; 21
	lcd |=(1<<en);		//en =1		
 108:	aa 9a       	sbi	0x15, 2	; 21
 10a:	20 ed       	ldi	r18, 0xD0	; 208
 10c:	37 e0       	ldi	r19, 0x07	; 7
 10e:	f9 01       	movw	r30, r18
 110:	31 97       	sbiw	r30, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <lcd_data+0x12>
	_delay_ms(1);
	lcd &= ~(1<<en);	//en =0	
 114:	aa 98       	cbi	0x15, 2	; 21
 116:	f9 01       	movw	r30, r18
 118:	31 97       	sbiw	r30, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <lcd_data+0x1a>
	_delay_ms(1);


	lcd =(value<<4) & 0xF0;	 //send lower bit
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	54 e0       	ldi	r21, 0x04	; 4
 120:	88 0f       	add	r24, r24
 122:	99 1f       	adc	r25, r25
 124:	5a 95       	dec	r21
 126:	e1 f7       	brne	.-8      	; 0x120 <lcd_data+0x22>
 128:	85 bb       	out	0x15, r24	; 21

	lcd |= (1<<rs); 	//rs =1	
 12a:	a8 9a       	sbi	0x15, 0	; 21
	lcd &= ~(1<<rw);	//rw =0
 12c:	a9 98       	cbi	0x15, 1	; 21
	lcd |=(1<<en);		//en =1		
 12e:	aa 9a       	sbi	0x15, 2	; 21
 130:	c9 01       	movw	r24, r18
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <lcd_data+0x34>
	_delay_ms(1);		
	lcd &= ~(1<<en);	//en =0	
 136:	aa 98       	cbi	0x15, 2	; 21
 138:	c9 01       	movw	r24, r18
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <lcd_data+0x3c>
	_delay_ms(1);
	
}
 13e:	08 95       	ret

00000140 <lcd_string>:


void lcd_string(unsigned char *a)    //lcd string function
{
 140:	cf 93       	push	r28
 142:	df 93       	push	r29
 144:	ec 01       	movw	r28, r24
 146:	03 c0       	rjmp	.+6      	; 0x14e <lcd_string+0xe>
    while(*a!='\0')
	{
	 lcd_data(*a);
 148:	0e 94 7f 00 	call	0xfe	; 0xfe <lcd_data>
	 a++;
 14c:	21 96       	adiw	r28, 0x01	; 1
}


void lcd_string(unsigned char *a)    //lcd string function
{
    while(*a!='\0')
 14e:	88 81       	ld	r24, Y
 150:	88 23       	and	r24, r24
 152:	d1 f7       	brne	.-12     	; 0x148 <lcd_string+0x8>
	{
	 lcd_data(*a);
	 a++;
    }
}
 154:	df 91       	pop	r29
 156:	cf 91       	pop	r28
 158:	08 95       	ret

0000015a <lcd_num>:

void lcd_num(unsigned int num)
{
 15a:	cf 93       	push	r28
 15c:	df 93       	push	r29
 15e:	ec 01       	movw	r28, r24
	lcd_command(0x04);
 160:	84 e0       	ldi	r24, 0x04	; 4
 162:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
 166:	0e c0       	rjmp	.+28     	; 0x184 <lcd_num+0x2a>
	unsigned int i;
	while(num!=0)
	{
		i=num%10;
		lcd_data(i+48);
 168:	ce 01       	movw	r24, r28
 16a:	6a e0       	ldi	r22, 0x0A	; 10
 16c:	70 e0       	ldi	r23, 0x00	; 0
 16e:	0e 94 de 01 	call	0x3bc	; 0x3bc <__udivmodhi4>
 172:	80 5d       	subi	r24, 0xD0	; 208
 174:	0e 94 7f 00 	call	0xfe	; 0xfe <lcd_data>
		num=num/10;
 178:	ce 01       	movw	r24, r28
 17a:	6a e0       	ldi	r22, 0x0A	; 10
 17c:	70 e0       	ldi	r23, 0x00	; 0
 17e:	0e 94 de 01 	call	0x3bc	; 0x3bc <__udivmodhi4>
 182:	eb 01       	movw	r28, r22

void lcd_num(unsigned int num)
{
	lcd_command(0x04);
	unsigned int i;
	while(num!=0)
 184:	20 97       	sbiw	r28, 0x00	; 0
 186:	81 f7       	brne	.-32     	; 0x168 <lcd_num+0xe>
	{
		i=num%10;
		lcd_data(i+48);
		num=num/10;
	}
	lcd_command(0x06);
 188:	86 e0       	ldi	r24, 0x06	; 6
 18a:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
}
 18e:	df 91       	pop	r29
 190:	cf 91       	pop	r28
 192:	08 95       	ret

00000194 <keypad_init>:

  }
}

void keypad_init()
{
 194:	d0 9a       	sbi	0x1a, 0	; 26
  DDRA |=(1<<PA0);//O/P
  DDRA |=(1<<PA1);
 196:	d1 9a       	sbi	0x1a, 1	; 26
  DDRA |=(1<<PA2);
 198:	d2 9a       	sbi	0x1a, 2	; 26

  DDRA &=~(1<<PA3);//INPUT
 19a:	d3 98       	cbi	0x1a, 3	; 26
  DDRA &=~(1<<PA4);
 19c:	d4 98       	cbi	0x1a, 4	; 26
  DDRA &=~(1<<PA5);
 19e:	d5 98       	cbi	0x1a, 5	; 26
  DDRA &=~(1<<PA6);
 1a0:	d6 98       	cbi	0x1a, 6	; 26
  

  PORTA |=(1<<PA3);
 1a2:	db 9a       	sbi	0x1b, 3	; 27
  PORTA |=(1<<PA4);
 1a4:	dc 9a       	sbi	0x1b, 4	; 27
  PORTA |=(1<<PA5);
 1a6:	dd 9a       	sbi	0x1b, 5	; 27
  PORTA |=(1<<PA6);
 1a8:	de 9a       	sbi	0x1b, 6	; 27
  
}
 1aa:	08 95       	ret

000001ac <keypad>:

//////////////////////

///////////////////////
int  keypad()
{
 1ac:	d8 98       	cbi	0x1b, 0	; 27
  
 

  PORTA &=~(1<<PA0);
  PORTA |=(1<<PA1);
 1ae:	d9 9a       	sbi	0x1b, 1	; 27
  PORTA |=(1<<PA2);
 1b0:	da 9a       	sbi	0x1b, 2	; 27
 1b2:	84 ef       	ldi	r24, 0xF4	; 244
 1b4:	91 e0       	ldi	r25, 0x01	; 1
 1b6:	28 ec       	ldi	r18, 0xC8	; 200
 1b8:	30 e0       	ldi	r19, 0x00	; 0
 1ba:	f9 01       	movw	r30, r18
 1bc:	31 97       	sbiw	r30, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <keypad+0x10>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1c0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1c2:	d9 f7       	brne	.-10     	; 0x1ba <keypad+0xe>
  _delay_ms(50);
  
 if((PINA & 0b01111000)==0b01110000) 
 1c4:	89 b3       	in	r24, 0x19	; 25
 1c6:	88 77       	andi	r24, 0x78	; 120
 1c8:	80 37       	cpi	r24, 0x70	; 112
 1ca:	29 f4       	brne	.+10     	; 0x1d6 <keypad+0x2a>
  {
     while((PINA & 0b01111000)==0b01110000);
 1cc:	89 b3       	in	r24, 0x19	; 25
 1ce:	88 77       	andi	r24, 0x78	; 120
 1d0:	80 37       	cpi	r24, 0x70	; 112
 1d2:	e1 f3       	breq	.-8      	; 0x1cc <keypad+0x20>
 1d4:	92 c0       	rjmp	.+292    	; 0x2fa <keypad+0x14e>
	 return 1;
	 
  }
 if((PINA & 0b01111000)==0b01101000) 
 1d6:	89 b3       	in	r24, 0x19	; 25
 1d8:	88 77       	andi	r24, 0x78	; 120
 1da:	88 36       	cpi	r24, 0x68	; 104
 1dc:	39 f4       	brne	.+14     	; 0x1ec <keypad+0x40>
  {
     while((PINA & 0b01111000)==0b01101000);
 1de:	89 b3       	in	r24, 0x19	; 25
 1e0:	88 77       	andi	r24, 0x78	; 120
 1e2:	88 36       	cpi	r24, 0x68	; 104
 1e4:	e1 f3       	breq	.-8      	; 0x1de <keypad+0x32>
 1e6:	22 e0       	ldi	r18, 0x02	; 2
 1e8:	30 e0       	ldi	r19, 0x00	; 0
 1ea:	89 c0       	rjmp	.+274    	; 0x2fe <keypad+0x152>
	 return 2;
	 
  }
   
  if((PINA & 0b01111000)==0b01011000) 
 1ec:	89 b3       	in	r24, 0x19	; 25
 1ee:	88 77       	andi	r24, 0x78	; 120
 1f0:	88 35       	cpi	r24, 0x58	; 88
 1f2:	39 f4       	brne	.+14     	; 0x202 <keypad+0x56>
  {
     while((PINA & 0b01111000)==0b01011000);
 1f4:	89 b3       	in	r24, 0x19	; 25
 1f6:	88 77       	andi	r24, 0x78	; 120
 1f8:	88 35       	cpi	r24, 0x58	; 88
 1fa:	e1 f3       	breq	.-8      	; 0x1f4 <keypad+0x48>
 1fc:	23 e0       	ldi	r18, 0x03	; 3
 1fe:	30 e0       	ldi	r19, 0x00	; 0
 200:	7e c0       	rjmp	.+252    	; 0x2fe <keypad+0x152>
	 return 3;
	 
  }
   if((PINA & 0b01111000)==0b00111000) 
 202:	89 b3       	in	r24, 0x19	; 25
 204:	88 77       	andi	r24, 0x78	; 120
 206:	88 33       	cpi	r24, 0x38	; 56
 208:	39 f4       	brne	.+14     	; 0x218 <keypad+0x6c>
  {
     while((PINA & 0b01111000)==0b00111000);
 20a:	89 b3       	in	r24, 0x19	; 25
 20c:	88 77       	andi	r24, 0x78	; 120
 20e:	88 33       	cpi	r24, 0x38	; 56
 210:	e1 f3       	breq	.-8      	; 0x20a <keypad+0x5e>
 212:	24 e0       	ldi	r18, 0x04	; 4
 214:	30 e0       	ldi	r19, 0x00	; 0
 216:	73 c0       	rjmp	.+230    	; 0x2fe <keypad+0x152>
	 return 4;
	 
  }

  PORTA |=(1<<PA0);
 218:	d8 9a       	sbi	0x1b, 0	; 27
  PORTA &=~(1<<PA2);
 21a:	da 98       	cbi	0x1b, 2	; 27
  PORTA |=(1<<PA3);
 21c:	db 9a       	sbi	0x1b, 3	; 27
 21e:	84 ef       	ldi	r24, 0xF4	; 244
 220:	91 e0       	ldi	r25, 0x01	; 1
 222:	28 ec       	ldi	r18, 0xC8	; 200
 224:	30 e0       	ldi	r19, 0x00	; 0
 226:	f9 01       	movw	r30, r18
 228:	31 97       	sbiw	r30, 0x01	; 1
 22a:	f1 f7       	brne	.-4      	; 0x228 <keypad+0x7c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 22c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 22e:	d9 f7       	brne	.-10     	; 0x226 <keypad+0x7a>
  _delay_ms(50);

   if((PINA & 0b01111000)==0b01110000) 
 230:	89 b3       	in	r24, 0x19	; 25
 232:	88 77       	andi	r24, 0x78	; 120
 234:	80 37       	cpi	r24, 0x70	; 112
 236:	39 f4       	brne	.+14     	; 0x246 <keypad+0x9a>
  {
     while((PINA & 0b01111000)==0b01110000);
 238:	89 b3       	in	r24, 0x19	; 25
 23a:	88 77       	andi	r24, 0x78	; 120
 23c:	80 37       	cpi	r24, 0x70	; 112
 23e:	e1 f3       	breq	.-8      	; 0x238 <keypad+0x8c>
 240:	25 e0       	ldi	r18, 0x05	; 5
 242:	30 e0       	ldi	r19, 0x00	; 0
 244:	5c c0       	rjmp	.+184    	; 0x2fe <keypad+0x152>
	 return 5;
	 
  }
 if((PINA & 0b01111000)==0b01101000) 
 246:	89 b3       	in	r24, 0x19	; 25
 248:	88 77       	andi	r24, 0x78	; 120
 24a:	88 36       	cpi	r24, 0x68	; 104
 24c:	39 f4       	brne	.+14     	; 0x25c <keypad+0xb0>
  {
     while((PINA & 0b01111000)==0b01101000);
 24e:	89 b3       	in	r24, 0x19	; 25
 250:	88 77       	andi	r24, 0x78	; 120
 252:	88 36       	cpi	r24, 0x68	; 104
 254:	e1 f3       	breq	.-8      	; 0x24e <keypad+0xa2>
 256:	26 e0       	ldi	r18, 0x06	; 6
 258:	30 e0       	ldi	r19, 0x00	; 0
 25a:	51 c0       	rjmp	.+162    	; 0x2fe <keypad+0x152>
	 return 6;
	 
  }
   
  if((PINA & 0b01111000)==0b01011000) 
 25c:	89 b3       	in	r24, 0x19	; 25
 25e:	88 77       	andi	r24, 0x78	; 120
 260:	88 35       	cpi	r24, 0x58	; 88
 262:	39 f4       	brne	.+14     	; 0x272 <keypad+0xc6>
  {
     while((PINA & 0b01111000)==0b01011000);
 264:	89 b3       	in	r24, 0x19	; 25
 266:	88 77       	andi	r24, 0x78	; 120
 268:	88 35       	cpi	r24, 0x58	; 88
 26a:	e1 f3       	breq	.-8      	; 0x264 <keypad+0xb8>
 26c:	27 e0       	ldi	r18, 0x07	; 7
 26e:	30 e0       	ldi	r19, 0x00	; 0
 270:	46 c0       	rjmp	.+140    	; 0x2fe <keypad+0x152>
	 return 7;
	 
  }
   if((PINA & 0b01111000)==0b00111000) 
 272:	89 b3       	in	r24, 0x19	; 25
 274:	88 77       	andi	r24, 0x78	; 120
 276:	88 33       	cpi	r24, 0x38	; 56
 278:	39 f4       	brne	.+14     	; 0x288 <keypad+0xdc>
  {
     while((PINA & 0b01111000)==0b00111000);
 27a:	89 b3       	in	r24, 0x19	; 25
 27c:	88 77       	andi	r24, 0x78	; 120
 27e:	88 33       	cpi	r24, 0x38	; 56
 280:	e1 f3       	breq	.-8      	; 0x27a <keypad+0xce>
 282:	28 e0       	ldi	r18, 0x08	; 8
 284:	30 e0       	ldi	r19, 0x00	; 0
 286:	3b c0       	rjmp	.+118    	; 0x2fe <keypad+0x152>
	 return 8;
	 
  }

  PORTA |=(1<<PA0);
 288:	d8 9a       	sbi	0x1b, 0	; 27
  PORTA |=(1<<PA1);
 28a:	d9 9a       	sbi	0x1b, 1	; 27
   PORTA &=~(1<<PA2);
 28c:	da 98       	cbi	0x1b, 2	; 27
 28e:	84 ef       	ldi	r24, 0xF4	; 244
 290:	91 e0       	ldi	r25, 0x01	; 1
 292:	28 ec       	ldi	r18, 0xC8	; 200
 294:	30 e0       	ldi	r19, 0x00	; 0
 296:	f9 01       	movw	r30, r18
 298:	31 97       	sbiw	r30, 0x01	; 1
 29a:	f1 f7       	brne	.-4      	; 0x298 <keypad+0xec>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 29c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 29e:	d9 f7       	brne	.-10     	; 0x296 <keypad+0xea>
  _delay_ms(50);
   if((PINA & 0b01111000)==0b01110000) 
 2a0:	89 b3       	in	r24, 0x19	; 25
 2a2:	88 77       	andi	r24, 0x78	; 120
 2a4:	80 37       	cpi	r24, 0x70	; 112
 2a6:	39 f4       	brne	.+14     	; 0x2b6 <keypad+0x10a>
  {
     while((PINA & 0b01111000)==0b01110000);
 2a8:	89 b3       	in	r24, 0x19	; 25
 2aa:	88 77       	andi	r24, 0x78	; 120
 2ac:	80 37       	cpi	r24, 0x70	; 112
 2ae:	e1 f3       	breq	.-8      	; 0x2a8 <keypad+0xfc>
 2b0:	29 e0       	ldi	r18, 0x09	; 9
 2b2:	30 e0       	ldi	r19, 0x00	; 0
 2b4:	24 c0       	rjmp	.+72     	; 0x2fe <keypad+0x152>
	 return 9;
	 
  }
 if((PINA & 0b01111000)==0b01101000) 
 2b6:	89 b3       	in	r24, 0x19	; 25
 2b8:	88 77       	andi	r24, 0x78	; 120
 2ba:	88 36       	cpi	r24, 0x68	; 104
 2bc:	39 f4       	brne	.+14     	; 0x2cc <keypad+0x120>
  {
     while((PINA & 0b01111000)==0b01101000);
 2be:	89 b3       	in	r24, 0x19	; 25
 2c0:	88 77       	andi	r24, 0x78	; 120
 2c2:	88 36       	cpi	r24, 0x68	; 104
 2c4:	e1 f3       	breq	.-8      	; 0x2be <keypad+0x112>
 2c6:	2a e0       	ldi	r18, 0x0A	; 10
 2c8:	30 e0       	ldi	r19, 0x00	; 0
 2ca:	19 c0       	rjmp	.+50     	; 0x2fe <keypad+0x152>
	 return 10;
	 
  }
   
  if((PINA & 0b01111000)==0b01011000) 
 2cc:	89 b3       	in	r24, 0x19	; 25
 2ce:	88 77       	andi	r24, 0x78	; 120
 2d0:	88 35       	cpi	r24, 0x58	; 88
 2d2:	39 f4       	brne	.+14     	; 0x2e2 <keypad+0x136>
  {
     while((PINA & 0b01111000)==0b01011000);
 2d4:	89 b3       	in	r24, 0x19	; 25
 2d6:	88 77       	andi	r24, 0x78	; 120
 2d8:	88 35       	cpi	r24, 0x58	; 88
 2da:	e1 f3       	breq	.-8      	; 0x2d4 <keypad+0x128>
 2dc:	2b e0       	ldi	r18, 0x0B	; 11
 2de:	30 e0       	ldi	r19, 0x00	; 0
 2e0:	0e c0       	rjmp	.+28     	; 0x2fe <keypad+0x152>
	 return 11;
	 
  }
   if((PINA & 0b01111000)==0b00111000) 
 2e2:	89 b3       	in	r24, 0x19	; 25
 2e4:	88 77       	andi	r24, 0x78	; 120
 2e6:	88 33       	cpi	r24, 0x38	; 56
 2e8:	39 f4       	brne	.+14     	; 0x2f8 <keypad+0x14c>
  {
     while((PINA & 0b01111000)==0b00111000);
 2ea:	89 b3       	in	r24, 0x19	; 25
 2ec:	88 77       	andi	r24, 0x78	; 120
 2ee:	88 33       	cpi	r24, 0x38	; 56
 2f0:	e1 f3       	breq	.-8      	; 0x2ea <keypad+0x13e>
 2f2:	2c e0       	ldi	r18, 0x0C	; 12
 2f4:	30 e0       	ldi	r19, 0x00	; 0
 2f6:	03 c0       	rjmp	.+6      	; 0x2fe <keypad+0x152>
 2f8:	08 95       	ret
	 return 12;
	 
  }

} 
 2fa:	21 e0       	ldi	r18, 0x01	; 1
 2fc:	30 e0       	ldi	r19, 0x00	; 0
 2fe:	c9 01       	movw	r24, r18
 300:	08 95       	ret

00000302 <main>:
	lcd_command(0x06);
}


int main()
{
 302:	0f 93       	push	r16
 304:	1f 93       	push	r17
 306:	cf 93       	push	r28
 308:	df 93       	push	r29
  DDRC=0xFF;
 30a:	8f ef       	ldi	r24, 0xFF	; 255
 30c:	84 bb       	out	0x14, r24	; 20
  lcd_init();
 30e:	0e 94 6a 00 	call	0xd4	; 0xd4 <lcd_init>
 312:	88 ee       	ldi	r24, 0xE8	; 232
 314:	93 e0       	ldi	r25, 0x03	; 3
 316:	28 ec       	ldi	r18, 0xC8	; 200
 318:	30 e0       	ldi	r19, 0x00	; 0
 31a:	f9 01       	movw	r30, r18
 31c:	31 97       	sbiw	r30, 0x01	; 1
 31e:	f1 f7       	brne	.-4      	; 0x31c <main+0x1a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 320:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 322:	d9 f7       	brne	.-10     	; 0x31a <main+0x18>
  _delay_ms(100);
  keypad_init();
 324:	0e 94 ca 00 	call	0x194	; 0x194 <keypad_init>
 328:	08 ec       	ldi	r16, 0xC8	; 200
 32a:	10 e0       	ldi	r17, 0x00	; 0
  
  while(1)
  {
    int a=keypad();
 32c:	0e 94 d6 00 	call	0x1ac	; 0x1ac <keypad>
 330:	ec 01       	movw	r28, r24
	lcd_command(0x85);
 332:	85 e8       	ldi	r24, 0x85	; 133
 334:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
	lcd_string("WELCOME");
 338:	80 e6       	ldi	r24, 0x60	; 96
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_string>
 340:	88 ee       	ldi	r24, 0xE8	; 232
 342:	93 e0       	ldi	r25, 0x03	; 3
 344:	f8 01       	movw	r30, r16
 346:	31 97       	sbiw	r30, 0x01	; 1
 348:	f1 f7       	brne	.-4      	; 0x346 <main+0x44>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 34a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 34c:	d9 f7       	brne	.-10     	; 0x344 <main+0x42>
	_delay_ms(100);
	if(a==1)
 34e:	c1 30       	cpi	r28, 0x01	; 1
 350:	d1 05       	cpc	r29, r1
 352:	c9 f4       	brne	.+50     	; 0x386 <main+0x84>
	{
	  lcd_command(0xc5);
 354:	85 ec       	ldi	r24, 0xC5	; 197
 356:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
	  lcd_num(1);
 35a:	81 e0       	ldi	r24, 0x01	; 1
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	0e 94 ad 00 	call	0x15a	; 0x15a <lcd_num>
 362:	88 ee       	ldi	r24, 0xE8	; 232
 364:	93 e0       	ldi	r25, 0x03	; 3
 366:	f8 01       	movw	r30, r16
 368:	31 97       	sbiw	r30, 0x01	; 1
 36a:	f1 f7       	brne	.-4      	; 0x368 <main+0x66>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 36c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 36e:	d9 f7       	brne	.-10     	; 0x366 <main+0x64>
	  _delay_ms(100);
	  lcd_command(0x01);
 370:	81 e0       	ldi	r24, 0x01	; 1
 372:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
 376:	88 ee       	ldi	r24, 0xE8	; 232
 378:	93 e0       	ldi	r25, 0x03	; 3
 37a:	f8 01       	movw	r30, r16
 37c:	31 97       	sbiw	r30, 0x01	; 1
 37e:	f1 f7       	brne	.-4      	; 0x37c <main+0x7a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 380:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 382:	d9 f7       	brne	.-10     	; 0x37a <main+0x78>
 384:	d3 cf       	rjmp	.-90     	; 0x32c <main+0x2a>
	   _delay_ms(100);

    }
	else if(a==2)
 386:	22 97       	sbiw	r28, 0x02	; 2
 388:	89 f6       	brne	.-94     	; 0x32c <main+0x2a>
	{
	  
	  lcd_command(0xc5);
 38a:	85 ec       	ldi	r24, 0xC5	; 197
 38c:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
	  lcd_num(2);
 390:	82 e0       	ldi	r24, 0x02	; 2
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	0e 94 ad 00 	call	0x15a	; 0x15a <lcd_num>
 398:	88 ee       	ldi	r24, 0xE8	; 232
 39a:	93 e0       	ldi	r25, 0x03	; 3
 39c:	f8 01       	movw	r30, r16
 39e:	31 97       	sbiw	r30, 0x01	; 1
 3a0:	f1 f7       	brne	.-4      	; 0x39e <main+0x9c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3a2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3a4:	d9 f7       	brne	.-10     	; 0x39c <main+0x9a>
	  _delay_ms(100);
	   lcd_command(0x01);
 3a6:	81 e0       	ldi	r24, 0x01	; 1
 3a8:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
 3ac:	88 ee       	ldi	r24, 0xE8	; 232
 3ae:	93 e0       	ldi	r25, 0x03	; 3
 3b0:	f8 01       	movw	r30, r16
 3b2:	31 97       	sbiw	r30, 0x01	; 1
 3b4:	f1 f7       	brne	.-4      	; 0x3b2 <main+0xb0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3b6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3b8:	d9 f7       	brne	.-10     	; 0x3b0 <main+0xae>
 3ba:	b8 cf       	rjmp	.-144    	; 0x32c <main+0x2a>

000003bc <__udivmodhi4>:
 3bc:	aa 1b       	sub	r26, r26
 3be:	bb 1b       	sub	r27, r27
 3c0:	51 e1       	ldi	r21, 0x11	; 17
 3c2:	07 c0       	rjmp	.+14     	; 0x3d2 <__udivmodhi4_ep>

000003c4 <__udivmodhi4_loop>:
 3c4:	aa 1f       	adc	r26, r26
 3c6:	bb 1f       	adc	r27, r27
 3c8:	a6 17       	cp	r26, r22
 3ca:	b7 07       	cpc	r27, r23
 3cc:	10 f0       	brcs	.+4      	; 0x3d2 <__udivmodhi4_ep>
 3ce:	a6 1b       	sub	r26, r22
 3d0:	b7 0b       	sbc	r27, r23

000003d2 <__udivmodhi4_ep>:
 3d2:	88 1f       	adc	r24, r24
 3d4:	99 1f       	adc	r25, r25
 3d6:	5a 95       	dec	r21
 3d8:	a9 f7       	brne	.-22     	; 0x3c4 <__udivmodhi4_loop>
 3da:	80 95       	com	r24
 3dc:	90 95       	com	r25
 3de:	bc 01       	movw	r22, r24
 3e0:	cd 01       	movw	r24, r26
 3e2:	08 95       	ret

000003e4 <_exit>:
 3e4:	f8 94       	cli

000003e6 <__stop_program>:
 3e6:	ff cf       	rjmp	.-2      	; 0x3e6 <__stop_program>
