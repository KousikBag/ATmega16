
Practical_55.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000196  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000001ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000004b  00000000  00000000  0000020a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000189  00000000  00000000  00000255  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000fc  00000000  00000000  000003de  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001a6  00000000  00000000  000004da  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000050  00000000  00000000  00000680  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000103  00000000  00000000  000006d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000ae  00000000  00000000  000007d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  00000881  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e9       	ldi	r30, 0x96	; 150
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 72 00 	call	0xe4	; 0xe4 <main>
  8a:	0c 94 c9 00 	jmp	0x192	; 0x192 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <set_frequency>:
#define N 8
#define MAX_FREQ (F_CPU / (2 * N)) /* F_CPU / (2 * N * (1 + (OCR2 = 0))) */
#define MIN_FREQ (F_CPU / (2 * N * 256)) /* F_CPU / (2 * N * (1 + (OCR2 = 255))) */

void set_frequency(unsigned long freq)
{
  92:	9b 01       	movw	r18, r22
  94:	ac 01       	movw	r20, r24
	if (freq < MIN_FREQ)
  96:	64 3f       	cpi	r22, 0xF4	; 244
  98:	71 05       	cpc	r23, r1
  9a:	81 05       	cpc	r24, r1
  9c:	91 05       	cpc	r25, r1
  9e:	28 f4       	brcc	.+10     	; 0xaa <set_frequency+0x18>
  a0:	24 ef       	ldi	r18, 0xF4	; 244
  a2:	30 e0       	ldi	r19, 0x00	; 0
  a4:	40 e0       	ldi	r20, 0x00	; 0
  a6:	50 e0       	ldi	r21, 0x00	; 0
  a8:	0c c0       	rjmp	.+24     	; 0xc2 <set_frequency+0x30>
  aa:	25 32       	cpi	r18, 0x25	; 37
  ac:	84 ef       	ldi	r24, 0xF4	; 244
  ae:	38 07       	cpc	r19, r24
  b0:	80 e0       	ldi	r24, 0x00	; 0
  b2:	48 07       	cpc	r20, r24
  b4:	80 e0       	ldi	r24, 0x00	; 0
  b6:	58 07       	cpc	r21, r24
  b8:	20 f0       	brcs	.+8      	; 0xc2 <set_frequency+0x30>
  ba:	24 e2       	ldi	r18, 0x24	; 36
  bc:	34 ef       	ldi	r19, 0xF4	; 244
  be:	40 e0       	ldi	r20, 0x00	; 0
  c0:	50 e0       	ldi	r21, 0x00	; 0
	} else if (freq > MAX_FREQ)
	{
		freq = MAX_FREQ;
	}
	/* f = MAX_FREQ / (1 + OCR2), i.e. OCR2 = MAX_FREQ / f - 1; */
	OCR2 = MAX_FREQ / freq - 1;
  c2:	64 e2       	ldi	r22, 0x24	; 36
  c4:	74 ef       	ldi	r23, 0xF4	; 244
  c6:	80 e0       	ldi	r24, 0x00	; 0
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	0e 94 a7 00 	call	0x14e	; 0x14e <__udivmodsi4>
  ce:	21 50       	subi	r18, 0x01	; 1
  d0:	23 bd       	out	0x23, r18	; 35
}
  d2:	08 95       	ret

000000d4 <init_timer>:
void init_timer(unsigned long freq)
{
  d4:	8f 9a       	sbi	0x11, 7	; 17
	DDRD |= (1 << PD7); // OC2 is PD7 - setting it as output

	set_frequency(freq);
  d6:	0e 94 49 00 	call	0x92	; 0x92 <set_frequency>
	 * Setting the Timer/Counter2 in CTC (Clear Timer on Compare) (non-PWM) mode.
	 * Toggling on Match to generate square wave for a particular frequency,
	 * as per the prescaler and OCR2 setting.
	 * Output would come on OC2/PD7 (Pin 21).
	 */
	TCCR2 = (1 << WGM21) | (0 << WGM20) | (1 << COM20) | PRESCALER;
  da:	8a e1       	ldi	r24, 0x1A	; 26
  dc:	85 bd       	out	0x25, r24	; 37
}
  de:	08 95       	ret

000000e0 <stop_timer>:
void stop_timer(void)
{
  e0:	15 bc       	out	0x25, r1	; 37
	TCCR2 = 0;
}
  e2:	08 95       	ret

000000e4 <main>:

int main(void)
{
  e4:	ef 92       	push	r14
  e6:	ff 92       	push	r15
  e8:	0f 93       	push	r16
  ea:	1f 93       	push	r17
  ec:	cf 93       	push	r28
  ee:	df 93       	push	r29
	unsigned long freq = MIN_FREQ;

	init_timer(freq);
  f0:	64 ef       	ldi	r22, 0xF4	; 244
  f2:	70 e0       	ldi	r23, 0x00	; 0
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	0e 94 6a 00 	call	0xd4	; 0xd4 <init_timer>
  fc:	94 ef       	ldi	r25, 0xF4	; 244
  fe:	e9 2e       	mov	r14, r25
 100:	f1 2c       	mov	r15, r1
 102:	01 2d       	mov	r16, r1
 104:	11 2d       	mov	r17, r1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 106:	c9 e1       	ldi	r28, 0x19	; 25
 108:	d0 e0       	ldi	r29, 0x00	; 0
 10a:	88 e9       	ldi	r24, 0x98	; 152
 10c:	9a e3       	ldi	r25, 0x3A	; 58
 10e:	fe 01       	movw	r30, r28
 110:	31 97       	sbiw	r30, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <main+0x2c>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 114:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 116:	d9 f7       	brne	.-10     	; 0x10e <main+0x2a>

	while (1)
	{
		_delay_ms(1500);
		freq += MIN_FREQ;
 118:	84 ef       	ldi	r24, 0xF4	; 244
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	a0 e0       	ldi	r26, 0x00	; 0
 11e:	b0 e0       	ldi	r27, 0x00	; 0
 120:	e8 0e       	add	r14, r24
 122:	f9 1e       	adc	r15, r25
 124:	0a 1f       	adc	r16, r26
 126:	1b 1f       	adc	r17, r27
		if (freq > HUMAN_AUDIBLE_MAX_FREQ)
 128:	91 e2       	ldi	r25, 0x21	; 33
 12a:	e9 16       	cp	r14, r25
 12c:	9e e4       	ldi	r25, 0x4E	; 78
 12e:	f9 06       	cpc	r15, r25
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	09 07       	cpc	r16, r25
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	19 07       	cpc	r17, r25
 138:	28 f0       	brcs	.+10     	; 0x144 <main+0x60>
 13a:	84 ef       	ldi	r24, 0xF4	; 244
 13c:	e8 2e       	mov	r14, r24
 13e:	f1 2c       	mov	r15, r1
 140:	01 2d       	mov	r16, r1
 142:	11 2d       	mov	r17, r1
		{
			freq = MIN_FREQ;
		}
		set_frequency(freq);
 144:	c8 01       	movw	r24, r16
 146:	b7 01       	movw	r22, r14
 148:	0e 94 49 00 	call	0x92	; 0x92 <set_frequency>
 14c:	de cf       	rjmp	.-68     	; 0x10a <main+0x26>

0000014e <__udivmodsi4>:
 14e:	a1 e2       	ldi	r26, 0x21	; 33
 150:	1a 2e       	mov	r1, r26
 152:	aa 1b       	sub	r26, r26
 154:	bb 1b       	sub	r27, r27
 156:	fd 01       	movw	r30, r26
 158:	0d c0       	rjmp	.+26     	; 0x174 <__udivmodsi4_ep>

0000015a <__udivmodsi4_loop>:
 15a:	aa 1f       	adc	r26, r26
 15c:	bb 1f       	adc	r27, r27
 15e:	ee 1f       	adc	r30, r30
 160:	ff 1f       	adc	r31, r31
 162:	a2 17       	cp	r26, r18
 164:	b3 07       	cpc	r27, r19
 166:	e4 07       	cpc	r30, r20
 168:	f5 07       	cpc	r31, r21
 16a:	20 f0       	brcs	.+8      	; 0x174 <__udivmodsi4_ep>
 16c:	a2 1b       	sub	r26, r18
 16e:	b3 0b       	sbc	r27, r19
 170:	e4 0b       	sbc	r30, r20
 172:	f5 0b       	sbc	r31, r21

00000174 <__udivmodsi4_ep>:
 174:	66 1f       	adc	r22, r22
 176:	77 1f       	adc	r23, r23
 178:	88 1f       	adc	r24, r24
 17a:	99 1f       	adc	r25, r25
 17c:	1a 94       	dec	r1
 17e:	69 f7       	brne	.-38     	; 0x15a <__udivmodsi4_loop>
 180:	60 95       	com	r22
 182:	70 95       	com	r23
 184:	80 95       	com	r24
 186:	90 95       	com	r25
 188:	9b 01       	movw	r18, r22
 18a:	ac 01       	movw	r20, r24
 18c:	bd 01       	movw	r22, r26
 18e:	cf 01       	movw	r24, r30
 190:	08 95       	ret

00000192 <_exit>:
 192:	f8 94       	cli

00000194 <__stop_program>:
 194:	ff cf       	rjmp	.-2      	; 0x194 <__stop_program>
