
Practical_54.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000cc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000120  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000028  00000000  00000000  00000140  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000165  00000000  00000000  00000168  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000fa  00000000  00000000  000002cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000016c  00000000  00000000  000003c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000030  00000000  00000000  00000534  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000e8  00000000  00000000  00000564  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000040  00000000  00000000  0000064c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  0000068c  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ec       	ldi	r30, 0xCC	; 204
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 4d 00 	call	0x9a	; 0x9a <main>
  8a:	0c 94 64 00 	jmp	0xc8	; 0xc8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <PWM_init>:

#define F_CPU 800000UL
#include<avr/io.h>
#include<util/delay.h>
void PWM_init()
{
  92:	89 e6       	ldi	r24, 0x69	; 105
  94:	83 bf       	out	0x33, r24	; 51
  TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS00);
  DDRB|=(1<<PB3);  /*set OC0 pin as output*/
  96:	bb 9a       	sbi	0x17, 3	; 23
}
  98:	08 95       	ret

0000009a <main>:


int main ()
{
  9a:	89 e6       	ldi	r24, 0x69	; 105
  9c:	83 bf       	out	0x33, r24	; 51
#include<avr/io.h>
#include<util/delay.h>
void PWM_init()
{
  TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS00);
  DDRB|=(1<<PB3);  /*set OC0 pin as output*/
  9e:	bb 9a       	sbi	0x17, 3	; 23
  a0:	20 e0       	ldi	r18, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  a2:	40 e2       	ldi	r20, 0x20	; 32
  a4:	5e e4       	ldi	r21, 0x4E	; 78
  a6:	05 c0       	rjmp	.+10     	; 0xb2 <main+0x18>
	PWM_init();
	while (1)
	{
		for(duty=0; duty<255; duty++)
		{	
			OCR0=duty;     /*increase the LED light intensity*/
  a8:	2c bf       	out	0x3c, r18	; 60
  aa:	ca 01       	movw	r24, r20
  ac:	01 97       	sbiw	r24, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <main+0x12>
	unsigned char duty;
	
	PWM_init();
	while (1)
	{
		for(duty=0; duty<255; duty++)
  b0:	2f 5f       	subi	r18, 0xFF	; 255
  b2:	2f 3f       	cpi	r18, 0xFF	; 255
  b4:	c9 f7       	brne	.-14     	; 0xa8 <main+0xe>
			OCR0=duty;     /*increase the LED light intensity*/
			_delay_ms(100);
		}
		for(duty=255; duty>1; duty--)
		{
			 OCR0=duty;    /*decrease the LED light intensity*/
  b6:	2c bf       	out	0x3c, r18	; 60
  b8:	ca 01       	movw	r24, r20
  ba:	01 97       	sbiw	r24, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <main+0x20>
		for(duty=0; duty<255; duty++)
		{	
			OCR0=duty;     /*increase the LED light intensity*/
			_delay_ms(100);
		}
		for(duty=255; duty>1; duty--)
  be:	21 50       	subi	r18, 0x01	; 1
  c0:	21 30       	cpi	r18, 0x01	; 1
  c2:	c9 f7       	brne	.-14     	; 0xb6 <main+0x1c>
  c4:	20 e0       	ldi	r18, 0x00	; 0
  c6:	f0 cf       	rjmp	.-32     	; 0xa8 <main+0xe>

000000c8 <_exit>:
  c8:	f8 94       	cli

000000ca <__stop_program>:
  ca:	ff cf       	rjmp	.-2      	; 0xca <__stop_program>
