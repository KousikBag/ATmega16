
Practical_33.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000144  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000058  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000001f9  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000167  00000000  00000000  00000409  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000002b1  00000000  00000000  00000570  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000060  00000000  00000000  00000824  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000fe  00000000  00000000  00000884  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000030  00000000  00000000  00000982  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e4       	ldi	r30, 0x44	; 68
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 63 00 	call	0xc6	; 0xc6 <main>
  8a:	0c 94 a0 00 	jmp	0x140	; 0x140 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <usart_init>:
#define F_CPU 8000000UL
#include<avr/io.h>
#include<util/delay.h>
void usart_init()
{
  92:	83 e3       	ldi	r24, 0x33	; 51
  94:	89 b9       	out	0x09, r24	; 9
 UBRRL=51;
 UBRRH=0;
  96:	10 bc       	out	0x20, r1	; 32
 UCSRB=0x18;
  98:	88 e1       	ldi	r24, 0x18	; 24
  9a:	8a b9       	out	0x0a, r24	; 10
 UCSRC=0x8e;
  9c:	8e e8       	ldi	r24, 0x8E	; 142
  9e:	80 bd       	out	0x20, r24	; 32
}
  a0:	08 95       	ret

000000a2 <usart_send>:

void usart_send(char send)
{
  a2:	5d 9b       	sbis	0x0b, 5	; 11
  a4:	fe cf       	rjmp	.-4      	; 0xa2 <usart_send>
  while((UCSRA&0x20)==0);
  UDR=send;
  a6:	8c b9       	out	0x0c, r24	; 12
}
  a8:	08 95       	ret

000000aa <usart_string>:
void usart_string(unsigned char *a)
{
  aa:	fc 01       	movw	r30, r24
  ac:	04 c0       	rjmp	.+8      	; 0xb6 <usart_string+0xc>
 UCSRC=0x8e;
}

void usart_send(char send)
{
  while((UCSRA&0x20)==0);
  ae:	5d 9b       	sbis	0x0b, 5	; 11
  b0:	fe cf       	rjmp	.-4      	; 0xae <usart_string+0x4>
  UDR=send;
  b2:	8c b9       	out	0x0c, r24	; 12
  b4:	31 96       	adiw	r30, 0x01	; 1
}
void usart_string(unsigned char *a)
{
    int i=0;
	while(a[i]!='\0')
  b6:	80 81       	ld	r24, Z
  b8:	88 23       	and	r24, r24
  ba:	c9 f7       	brne	.-14     	; 0xae <usart_string+0x4>
	{
		usart_send(a[i]);
		i++;
	}
	
}
  bc:	08 95       	ret

000000be <usart_rec>:

char usart_rec()
{
  be:	5f 9b       	sbis	0x0b, 7	; 11
  c0:	fe cf       	rjmp	.-4      	; 0xbe <usart_rec>
 while((UCSRA&0x80)==0);
 return UDR;
  c2:	8c b1       	in	r24, 0x0c	; 12
}
  c4:	08 95       	ret

000000c6 <main>:

int main()
{
  c6:	8f ef       	ldi	r24, 0xFF	; 255
  c8:	84 bb       	out	0x14, r24	; 20
#define F_CPU 8000000UL
#include<avr/io.h>
#include<util/delay.h>
void usart_init()
{
 UBRRL=51;
  ca:	83 e3       	ldi	r24, 0x33	; 51
  cc:	89 b9       	out	0x09, r24	; 9
 UBRRH=0;
  ce:	10 bc       	out	0x20, r1	; 32
 UCSRB=0x18;
  d0:	88 e1       	ldi	r24, 0x18	; 24
  d2:	8a b9       	out	0x0a, r24	; 10
 UCSRC=0x8e;
  d4:	8e e8       	ldi	r24, 0x8E	; 142
  d6:	80 bd       	out	0x20, r24	; 32
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  d8:	80 e2       	ldi	r24, 0x20	; 32
  da:	9e e4       	ldi	r25, 0x4E	; 78
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <main+0x16>
	{
	  PORTC=0x08;
	}
	else if(a=='a')
	{
	  PORTC=0xFF;
  e0:	ff ef       	ldi	r31, 0xFF	; 255
	{
	  PORTC=0x07;
	}
	else if(a=='8')
	{
	  PORTC=0x08;
  e2:	e8 e0       	ldi	r30, 0x08	; 8
	{
	  PORTC=0x06;
	}
	else if(a=='7')
	{
	  PORTC=0x07;
  e4:	77 e0       	ldi	r23, 0x07	; 7
	{
	  PORTC=0x05;
	}
	else if(a=='6')
	{
	  PORTC=0x06;
  e6:	66 e0       	ldi	r22, 0x06	; 6
	{
	  PORTC=0x04;
	}
	else if(a=='5')
	{
	  PORTC=0x05;
  e8:	55 e0       	ldi	r21, 0x05	; 5
	{
	  PORTC=0x03;
	}
	else if(a=='4')
	{
	  PORTC=0x04;
  ea:	44 e0       	ldi	r20, 0x04	; 4
	{
	  PORTC=0x02;
	}
	else if(a=='3')
	{
	  PORTC=0x03;
  ec:	33 e0       	ldi	r19, 0x03	; 3
	  PORTC=0x01;
	 
    }
	else if(a=='2')
	{
	  PORTC=0x02;
  ee:	22 e0       	ldi	r18, 0x02	; 2
  while(1)
  {
    char a=usart_rec();
    if(a=='1')
	{
	  PORTC=0x01;
  f0:	91 e0       	ldi	r25, 0x01	; 1
	
}

char usart_rec()
{
 while((UCSRA&0x80)==0);
  f2:	5f 9b       	sbis	0x0b, 7	; 11
  f4:	fe cf       	rjmp	.-4      	; 0xf2 <main+0x2c>
 return UDR;
  f6:	8c b1       	in	r24, 0x0c	; 12
  usart_init();
  _delay_ms(10);
  while(1)
  {
    char a=usart_rec();
    if(a=='1')
  f8:	81 33       	cpi	r24, 0x31	; 49
  fa:	11 f4       	brne	.+4      	; 0x100 <main+0x3a>
	{
	  PORTC=0x01;
  fc:	95 bb       	out	0x15, r25	; 21
  fe:	f9 cf       	rjmp	.-14     	; 0xf2 <main+0x2c>
	 
    }
	else if(a=='2')
 100:	82 33       	cpi	r24, 0x32	; 50
 102:	11 f4       	brne	.+4      	; 0x108 <main+0x42>
	{
	  PORTC=0x02;
 104:	25 bb       	out	0x15, r18	; 21
 106:	f5 cf       	rjmp	.-22     	; 0xf2 <main+0x2c>
	}
	else if(a=='3')
 108:	83 33       	cpi	r24, 0x33	; 51
 10a:	11 f4       	brne	.+4      	; 0x110 <main+0x4a>
	{
	  PORTC=0x03;
 10c:	35 bb       	out	0x15, r19	; 21
 10e:	f1 cf       	rjmp	.-30     	; 0xf2 <main+0x2c>
	}
	else if(a=='4')
 110:	84 33       	cpi	r24, 0x34	; 52
 112:	11 f4       	brne	.+4      	; 0x118 <main+0x52>
	{
	  PORTC=0x04;
 114:	45 bb       	out	0x15, r20	; 21
 116:	ed cf       	rjmp	.-38     	; 0xf2 <main+0x2c>
	}
	else if(a=='5')
 118:	85 33       	cpi	r24, 0x35	; 53
 11a:	11 f4       	brne	.+4      	; 0x120 <main+0x5a>
	{
	  PORTC=0x05;
 11c:	55 bb       	out	0x15, r21	; 21
 11e:	e9 cf       	rjmp	.-46     	; 0xf2 <main+0x2c>
	}
	else if(a=='6')
 120:	86 33       	cpi	r24, 0x36	; 54
 122:	11 f4       	brne	.+4      	; 0x128 <main+0x62>
	{
	  PORTC=0x06;
 124:	65 bb       	out	0x15, r22	; 21
 126:	e5 cf       	rjmp	.-54     	; 0xf2 <main+0x2c>
	}
	else if(a=='7')
 128:	87 33       	cpi	r24, 0x37	; 55
 12a:	11 f4       	brne	.+4      	; 0x130 <main+0x6a>
	{
	  PORTC=0x07;
 12c:	75 bb       	out	0x15, r23	; 21
 12e:	e1 cf       	rjmp	.-62     	; 0xf2 <main+0x2c>
	}
	else if(a=='8')
 130:	88 33       	cpi	r24, 0x38	; 56
 132:	11 f4       	brne	.+4      	; 0x138 <main+0x72>
	{
	  PORTC=0x08;
 134:	e5 bb       	out	0x15, r30	; 21
 136:	dd cf       	rjmp	.-70     	; 0xf2 <main+0x2c>
	}
	else if(a=='a')
 138:	81 36       	cpi	r24, 0x61	; 97
 13a:	d9 f6       	brne	.-74     	; 0xf2 <main+0x2c>
	{
	  PORTC=0xFF;
 13c:	f5 bb       	out	0x15, r31	; 21
 13e:	d9 cf       	rjmp	.-78     	; 0xf2 <main+0x2c>

00000140 <_exit>:
 140:	f8 94       	cli

00000142 <__stop_program>:
 142:	ff cf       	rjmp	.-2      	; 0x142 <__stop_program>
