
Practical_37.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000336  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  00000336  000003aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  0080007a  00000350  000003c4  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000003c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000063  00000000  00000000  000003e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000004e0  00000000  00000000  00000447  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000208  00000000  00000000  00000927  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003d0  00000000  00000000  00000b2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  00000f00  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000122  00000000  00000000  00000f70  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002e8  00000000  00000000  00001092  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  0000137a  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e3       	ldi	r30, 0x36	; 54
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	aa 37       	cpi	r26, 0x7A	; 122
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	aa e7       	ldi	r26, 0x7A	; 122
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 38       	cpi	r26, 0x86	; 134
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 99 01 	jmp	0x332	; 0x332 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <main>:
char usart_rec();
void usart_init();
void int_tx(int data);

int main()
{
  92:	cf 92       	push	r12
  94:	df 92       	push	r13
  96:	ef 92       	push	r14
  98:	ff 92       	push	r15
  9a:	0f 93       	push	r16
  9c:	1f 93       	push	r17
  9e:	df 93       	push	r29
  a0:	cf 93       	push	r28
  a2:	cd b7       	in	r28, 0x3d	; 61
  a4:	de b7       	in	r29, 0x3e	; 62
  a6:	68 97       	sbiw	r28, 0x18	; 24
  a8:	0f b6       	in	r0, 0x3f	; 63
  aa:	f8 94       	cli
  ac:	de bf       	out	0x3e, r29	; 62
  ae:	0f be       	out	0x3f, r0	; 63
  b0:	cd bf       	out	0x3d, r28	; 61
   
     DDRC=0xFF;
  b2:	8f ef       	ldi	r24, 0xFF	; 255
  b4:	84 bb       	out	0x14, r24	; 20
//////////////////////////////


void usart_init()
{
 UBRRL=51;
  b6:	83 e3       	ldi	r24, 0x33	; 51
  b8:	89 b9       	out	0x09, r24	; 9
 UBRRH=0;
  ba:	10 bc       	out	0x20, r1	; 32
 UCSRB=0x18;
  bc:	88 e1       	ldi	r24, 0x18	; 24
  be:	8a b9       	out	0x0a, r24	; 10
 UCSRC=0x8e;
  c0:	8e e8       	ldi	r24, 0x8E	; 142
  c2:	80 bd       	out	0x20, r24	; 32
  c4:	88 ee       	ldi	r24, 0xE8	; 232
  c6:	93 e0       	ldi	r25, 0x03	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  c8:	28 ec       	ldi	r18, 0xC8	; 200
  ca:	30 e0       	ldi	r19, 0x00	; 0
  cc:	f9 01       	movw	r30, r18
  ce:	31 97       	sbiw	r30, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <main+0x3c>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  d2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  d4:	d9 f7       	brne	.-10     	; 0xcc <main+0x3a>
   
     DDRC=0xFF;
     usart_init();
	_delay_ms(100);
   static char a[12];
   char b[12]="0D0076F2EB62";
  d6:	de 01       	movw	r26, r28
  d8:	11 96       	adiw	r26, 0x01	; 1
  da:	e0 e6       	ldi	r30, 0x60	; 96
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	8c e0       	ldi	r24, 0x0C	; 12
  e0:	01 90       	ld	r0, Z+
  e2:	0d 92       	st	X+, r0
  e4:	81 50       	subi	r24, 0x01	; 1
  e6:	e1 f7       	brne	.-8      	; 0xe0 <main+0x4e>
   char c[12]="0D0076CCA81F";
  e8:	de 01       	movw	r26, r28
  ea:	1d 96       	adiw	r26, 0x0d	; 13
  ec:	ed e6       	ldi	r30, 0x6D	; 109
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	8c e0       	ldi	r24, 0x0C	; 12
  f2:	01 90       	ld	r0, Z+
  f4:	0d 92       	st	X+, r0
  f6:	81 50       	subi	r24, 0x01	; 1
  f8:	e1 f7       	brne	.-8      	; 0xf2 <main+0x60>
  fa:	20 e0       	ldi	r18, 0x00	; 0
  fc:	30 e0       	ldi	r19, 0x00	; 0
	
	  

	  for(int j=0;j<=11;j++)
	  {
	  if(a[j]==b[j])
  fe:	7e 01       	movw	r14, r28
 100:	08 94       	sec
 102:	e1 1c       	adc	r14, r1
 104:	f1 1c       	adc	r15, r1
	  {count1++;}
	  if(a[j]==c[j])
 106:	8e 01       	movw	r16, r28
 108:	03 5f       	subi	r16, 0xF3	; 243
 10a:	1f 4f       	sbci	r17, 0xFF	; 255
			   
			   count1=0;count2=0;
       }
		else if(count2==12)
	    {
		      PORTC=0b00001000;//fan on/off
 10c:	88 e0       	ldi	r24, 0x08	; 8
 10e:	c8 2e       	mov	r12, r24
 110:	a8 ec       	ldi	r26, 0xC8	; 200
 112:	b0 e0       	ldi	r27, 0x00	; 0
	  }
	 

	  if(count1==12)
	  {
	          PORTC=0b00000001;//motor on//off
 114:	dd 24       	eor	r13, r13
 116:	d3 94       	inc	r13
 118:	0c c0       	rjmp	.+24     	; 0x132 <main+0xa0>
 UCSRB=0x18;
 UCSRC=0x8e;
}
char usart_rec()
{
 while((UCSRA&0x80)==0);
 11a:	5f 9b       	sbis	0x0b, 7	; 11
 11c:	fe cf       	rjmp	.-4      	; 0x11a <main+0x88>
 return UDR;
 11e:	8c b1       	in	r24, 0x0c	; 12
     int count1=0;
     int count2=0;

      for(int i=0;i<=11;i++)
	  {
	    a[i]=usart_rec();
 120:	f9 01       	movw	r30, r18
 122:	e6 58       	subi	r30, 0x86	; 134
 124:	ff 4f       	sbci	r31, 0xFF	; 255
 126:	80 83       	st	Z, r24
   while(1)
   {
     int count1=0;
     int count2=0;

      for(int i=0;i<=11;i++)
 128:	2f 5f       	subi	r18, 0xFF	; 255
 12a:	3f 4f       	sbci	r19, 0xFF	; 255
 12c:	02 c0       	rjmp	.+4      	; 0x132 <main+0xa0>
 12e:	20 e0       	ldi	r18, 0x00	; 0
 130:	30 e0       	ldi	r19, 0x00	; 0
 132:	2c 30       	cpi	r18, 0x0C	; 12
 134:	31 05       	cpc	r19, r1
 136:	8c f3       	brlt	.-30     	; 0x11a <main+0x88>
 138:	40 e0       	ldi	r20, 0x00	; 0
 13a:	50 e0       	ldi	r21, 0x00	; 0
 13c:	60 e0       	ldi	r22, 0x00	; 0
 13e:	70 e0       	ldi	r23, 0x00	; 0
 140:	20 e0       	ldi	r18, 0x00	; 0
 142:	30 e0       	ldi	r19, 0x00	; 0
	
	  

	  for(int j=0;j<=11;j++)
	  {
	  if(a[j]==b[j])
 144:	f9 01       	movw	r30, r18
 146:	e6 58       	subi	r30, 0x86	; 134
 148:	ff 4f       	sbci	r31, 0xFF	; 255
 14a:	90 81       	ld	r25, Z
 14c:	f7 01       	movw	r30, r14
 14e:	e2 0f       	add	r30, r18
 150:	f3 1f       	adc	r31, r19
 152:	80 81       	ld	r24, Z
 154:	98 17       	cp	r25, r24
 156:	11 f4       	brne	.+4      	; 0x15c <main+0xca>
	  {count1++;}
 158:	4f 5f       	subi	r20, 0xFF	; 255
 15a:	5f 4f       	sbci	r21, 0xFF	; 255
	  if(a[j]==c[j])
 15c:	f8 01       	movw	r30, r16
 15e:	e2 0f       	add	r30, r18
 160:	f3 1f       	adc	r31, r19
 162:	80 81       	ld	r24, Z
 164:	98 17       	cp	r25, r24
 166:	11 f4       	brne	.+4      	; 0x16c <main+0xda>
	  {count2++;}
 168:	6f 5f       	subi	r22, 0xFF	; 255
 16a:	7f 4f       	sbci	r23, 0xFF	; 255
		
      }
	
	  

	  for(int j=0;j<=11;j++)
 16c:	2f 5f       	subi	r18, 0xFF	; 255
 16e:	3f 4f       	sbci	r19, 0xFF	; 255
 170:	2c 30       	cpi	r18, 0x0C	; 12
 172:	31 05       	cpc	r19, r1
 174:	39 f7       	brne	.-50     	; 0x144 <main+0xb2>
	  if(a[j]==c[j])
	  {count2++;}
	  }
	 

	  if(count1==12)
 176:	4c 30       	cpi	r20, 0x0C	; 12
 178:	51 05       	cpc	r21, r1
 17a:	89 f4       	brne	.+34     	; 0x19e <main+0x10c>
	  {
	          PORTC=0b00000001;//motor on//off
 17c:	d5 ba       	out	0x15, r13	; 21
 17e:	80 e3       	ldi	r24, 0x30	; 48
 180:	95 e7       	ldi	r25, 0x75	; 117
 182:	fd 01       	movw	r30, r26
 184:	31 97       	sbiw	r30, 0x01	; 1
 186:	f1 f7       	brne	.-4      	; 0x184 <main+0xf2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 188:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 18a:	d9 f7       	brne	.-10     	; 0x182 <main+0xf0>
		      _delay_ms(3000);
		      PORTC=0b00000000;
 18c:	15 ba       	out	0x15, r1	; 21
 18e:	80 e3       	ldi	r24, 0x30	; 48
 190:	95 e7       	ldi	r25, 0x75	; 117
 192:	fd 01       	movw	r30, r26
 194:	31 97       	sbiw	r30, 0x01	; 1
 196:	f1 f7       	brne	.-4      	; 0x194 <main+0x102>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 198:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 19a:	d9 f7       	brne	.-10     	; 0x192 <main+0x100>
 19c:	c8 cf       	rjmp	.-112    	; 0x12e <main+0x9c>
			  _delay_ms(3000);
			   
			   count1=0;count2=0;
       }
		else if(count2==12)
 19e:	6c 30       	cpi	r22, 0x0C	; 12
 1a0:	71 05       	cpc	r23, r1
 1a2:	09 f0       	breq	.+2      	; 0x1a6 <main+0x114>
 1a4:	c4 cf       	rjmp	.-120    	; 0x12e <main+0x9c>
	    {
		      PORTC=0b00001000;//fan on/off
 1a6:	c5 ba       	out	0x15, r12	; 21
 1a8:	80 e3       	ldi	r24, 0x30	; 48
 1aa:	95 e7       	ldi	r25, 0x75	; 117
 1ac:	fd 01       	movw	r30, r26
 1ae:	31 97       	sbiw	r30, 0x01	; 1
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <main+0x11c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1b2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1b4:	d9 f7       	brne	.-10     	; 0x1ac <main+0x11a>
		      _delay_ms(3000);
		      PORTC=0b00000000;
 1b6:	15 ba       	out	0x15, r1	; 21
 1b8:	80 e3       	ldi	r24, 0x30	; 48
 1ba:	95 e7       	ldi	r25, 0x75	; 117
 1bc:	fd 01       	movw	r30, r26
 1be:	31 97       	sbiw	r30, 0x01	; 1
 1c0:	f1 f7       	brne	.-4      	; 0x1be <main+0x12c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1c2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1c4:	d9 f7       	brne	.-10     	; 0x1bc <main+0x12a>
 1c6:	b3 cf       	rjmp	.-154    	; 0x12e <main+0x9c>

000001c8 <int_tx>:
	 return 0;
}


void int_tx(int data)
{
 1c8:	af 92       	push	r10
 1ca:	bf 92       	push	r11
 1cc:	cf 92       	push	r12
 1ce:	df 92       	push	r13
 1d0:	ef 92       	push	r14
 1d2:	ff 92       	push	r15
 1d4:	0f 93       	push	r16
 1d6:	1f 93       	push	r17
 1d8:	df 93       	push	r29
 1da:	cf 93       	push	r28
 1dc:	cd b7       	in	r28, 0x3d	; 61
 1de:	de b7       	in	r29, 0x3e	; 62
 1e0:	2a 97       	sbiw	r28, 0x0a	; 10
 1e2:	0f b6       	in	r0, 0x3f	; 63
 1e4:	f8 94       	cli
 1e6:	de bf       	out	0x3e, r29	; 62
 1e8:	0f be       	out	0x3f, r0	; 63
 1ea:	cd bf       	out	0x3d, r28	; 61
 1ec:	8c 01       	movw	r16, r24
  int wc=0;
  unsigned char ulta[5];
  unsigned char sidha[5];
  int r=0,j1=0,i1=0;
  if(data==0)
 1ee:	00 97       	sbiw	r24, 0x00	; 0
 1f0:	29 f4       	brne	.+10     	; 0x1fc <int_tx+0x34>
 while((UCSRA&0x80)==0);
 return UDR;
}
void usart_send(char send)
{
  while((UCSRA&0x20)==0);
 1f2:	5d 9b       	sbis	0x0b, 5	; 11
 1f4:	fe cf       	rjmp	.-4      	; 0x1f2 <int_tx+0x2a>
  UDR=send;
 1f6:	80 e3       	ldi	r24, 0x30	; 48
 1f8:	8c b9       	out	0x0c, r24	; 12
 1fa:	49 c0       	rjmp	.+146    	; 0x28e <int_tx+0xc6>
 1fc:	ee 24       	eor	r14, r14
 1fe:	ff 24       	eor	r15, r15

 while(data!=0)
 {
    r=data%10;
    data=data/10;
    ulta[i1]=r+48;
 200:	5e 01       	movw	r10, r28
 202:	08 94       	sec
 204:	a1 1c       	adc	r10, r1
 206:	b1 1c       	adc	r11, r1
 208:	98 ec       	ldi	r25, 0xC8	; 200
 20a:	c9 2e       	mov	r12, r25
 20c:	d1 2c       	mov	r13, r1
    usart_send(48);
  }

 while(data!=0)
 {
    r=data%10;
 20e:	c8 01       	movw	r24, r16
 210:	6a e0       	ldi	r22, 0x0A	; 10
 212:	70 e0       	ldi	r23, 0x00	; 0
 214:	0e 94 72 01 	call	0x2e4	; 0x2e4 <__divmodhi4>
 218:	28 2f       	mov	r18, r24
    data=data/10;
 21a:	c8 01       	movw	r24, r16
 21c:	6a e0       	ldi	r22, 0x0A	; 10
 21e:	70 e0       	ldi	r23, 0x00	; 0
 220:	0e 94 72 01 	call	0x2e4	; 0x2e4 <__divmodhi4>
 224:	ab 01       	movw	r20, r22
 226:	8b 01       	movw	r16, r22
    ulta[i1]=r+48;
 228:	f5 01       	movw	r30, r10
 22a:	ee 0d       	add	r30, r14
 22c:	ff 1d       	adc	r31, r15
 22e:	20 5d       	subi	r18, 0xD0	; 208
 230:	20 83       	st	Z, r18
    i1++;
 232:	08 94       	sec
 234:	e1 1c       	adc	r14, r1
 236:	f1 1c       	adc	r15, r1
 238:	88 ee       	ldi	r24, 0xE8	; 232
 23a:	93 e0       	ldi	r25, 0x03	; 3
 23c:	f6 01       	movw	r30, r12
 23e:	31 97       	sbiw	r30, 0x01	; 1
 240:	f1 f7       	brne	.-4      	; 0x23e <int_tx+0x76>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 242:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 244:	d9 f7       	brne	.-10     	; 0x23c <int_tx+0x74>
  if(data==0)
  {
    usart_send(48);
  }

 while(data!=0)
 246:	45 2b       	or	r20, r21
 248:	11 f7       	brne	.-60     	; 0x20e <int_tx+0x46>
 24a:	9e 01       	movw	r18, r28
 24c:	2e 0d       	add	r18, r14
 24e:	3f 1d       	adc	r19, r15
 250:	a0 e0       	ldi	r26, 0x00	; 0
 252:	b0 e0       	ldi	r27, 0x00	; 0
 254:	ae 01       	movw	r20, r28
 256:	4a 5f       	subi	r20, 0xFA	; 250
 258:	5f 4f       	sbci	r21, 0xFF	; 255
 25a:	0a c0       	rjmp	.+20     	; 0x270 <int_tx+0xa8>
 }
  if(wc==1)
  {
  for(j1=0;j1<=(i1-1);j1++)
  {
    sidha[j1]=ulta[(i1-1)-j1];
 25c:	ba 01       	movw	r22, r20
 25e:	6a 0f       	add	r22, r26
 260:	7b 1f       	adc	r23, r27
 262:	f9 01       	movw	r30, r18
 264:	80 81       	ld	r24, Z
 266:	fb 01       	movw	r30, r22
 268:	80 83       	st	Z, r24
    _delay_ms(100);
    wc=1;
 }
  if(wc==1)
  {
  for(j1=0;j1<=(i1-1);j1++)
 26a:	11 96       	adiw	r26, 0x01	; 1
 26c:	21 50       	subi	r18, 0x01	; 1
 26e:	30 40       	sbci	r19, 0x00	; 0
 270:	ae 15       	cp	r26, r14
 272:	bf 05       	cpc	r27, r15
 274:	9c f3       	brlt	.-26     	; 0x25c <int_tx+0x94>
  {
    sidha[j1]=ulta[(i1-1)-j1];
  }
   sidha[j1]='\0';
 276:	a4 0f       	add	r26, r20
 278:	b5 1f       	adc	r27, r21
 27a:	1c 92       	st	X, r1
 27c:	fa 01       	movw	r30, r20
 27e:	04 c0       	rjmp	.+8      	; 0x288 <int_tx+0xc0>
 while((UCSRA&0x80)==0);
 return UDR;
}
void usart_send(char send)
{
  while((UCSRA&0x20)==0);
 280:	5d 9b       	sbis	0x0b, 5	; 11
 282:	fe cf       	rjmp	.-4      	; 0x280 <int_tx+0xb8>
  UDR=send;
 284:	8c b9       	out	0x0c, r24	; 12
 286:	31 96       	adiw	r30, 0x01	; 1
}
void usart_string(unsigned char *a)
{
    int i2=0;
	while(a[i2]!='\0')
 288:	80 81       	ld	r24, Z
 28a:	88 23       	and	r24, r24
 28c:	c9 f7       	brne	.-14     	; 0x280 <int_tx+0xb8>
    sidha[j1]=ulta[(i1-1)-j1];
  }
   sidha[j1]='\0';
   usart_string(sidha);wc=0;
   }
}
 28e:	2a 96       	adiw	r28, 0x0a	; 10
 290:	0f b6       	in	r0, 0x3f	; 63
 292:	f8 94       	cli
 294:	de bf       	out	0x3e, r29	; 62
 296:	0f be       	out	0x3f, r0	; 63
 298:	cd bf       	out	0x3d, r28	; 61
 29a:	cf 91       	pop	r28
 29c:	df 91       	pop	r29
 29e:	1f 91       	pop	r17
 2a0:	0f 91       	pop	r16
 2a2:	ff 90       	pop	r15
 2a4:	ef 90       	pop	r14
 2a6:	df 90       	pop	r13
 2a8:	cf 90       	pop	r12
 2aa:	bf 90       	pop	r11
 2ac:	af 90       	pop	r10
 2ae:	08 95       	ret

000002b0 <usart_init>:
//////////////////////////////


void usart_init()
{
 2b0:	83 e3       	ldi	r24, 0x33	; 51
 2b2:	89 b9       	out	0x09, r24	; 9
 UBRRL=51;
 UBRRH=0;
 2b4:	10 bc       	out	0x20, r1	; 32
 UCSRB=0x18;
 2b6:	88 e1       	ldi	r24, 0x18	; 24
 2b8:	8a b9       	out	0x0a, r24	; 10
 UCSRC=0x8e;
 2ba:	8e e8       	ldi	r24, 0x8E	; 142
 2bc:	80 bd       	out	0x20, r24	; 32
}
 2be:	08 95       	ret

000002c0 <usart_rec>:
char usart_rec()
{
 2c0:	5f 9b       	sbis	0x0b, 7	; 11
 2c2:	fe cf       	rjmp	.-4      	; 0x2c0 <usart_rec>
 while((UCSRA&0x80)==0);
 return UDR;
 2c4:	8c b1       	in	r24, 0x0c	; 12
}
 2c6:	08 95       	ret

000002c8 <usart_send>:
void usart_send(char send)
{
 2c8:	5d 9b       	sbis	0x0b, 5	; 11
 2ca:	fe cf       	rjmp	.-4      	; 0x2c8 <usart_send>
  while((UCSRA&0x20)==0);
  UDR=send;
 2cc:	8c b9       	out	0x0c, r24	; 12
}
 2ce:	08 95       	ret

000002d0 <usart_string>:
void usart_string(unsigned char *a)
{
 2d0:	fc 01       	movw	r30, r24
 2d2:	04 c0       	rjmp	.+8      	; 0x2dc <usart_string+0xc>
 while((UCSRA&0x80)==0);
 return UDR;
}
void usart_send(char send)
{
  while((UCSRA&0x20)==0);
 2d4:	5d 9b       	sbis	0x0b, 5	; 11
 2d6:	fe cf       	rjmp	.-4      	; 0x2d4 <usart_string+0x4>
  UDR=send;
 2d8:	8c b9       	out	0x0c, r24	; 12
 2da:	31 96       	adiw	r30, 0x01	; 1
}
void usart_string(unsigned char *a)
{
    int i2=0;
	while(a[i2]!='\0')
 2dc:	80 81       	ld	r24, Z
 2de:	88 23       	and	r24, r24
 2e0:	c9 f7       	brne	.-14     	; 0x2d4 <usart_string+0x4>
		usart_send(a[i2]);
		i2++;
	}
	

}
 2e2:	08 95       	ret

000002e4 <__divmodhi4>:
 2e4:	97 fb       	bst	r25, 7
 2e6:	09 2e       	mov	r0, r25
 2e8:	07 26       	eor	r0, r23
 2ea:	0a d0       	rcall	.+20     	; 0x300 <__divmodhi4_neg1>
 2ec:	77 fd       	sbrc	r23, 7
 2ee:	04 d0       	rcall	.+8      	; 0x2f8 <__divmodhi4_neg2>
 2f0:	0c d0       	rcall	.+24     	; 0x30a <__udivmodhi4>
 2f2:	06 d0       	rcall	.+12     	; 0x300 <__divmodhi4_neg1>
 2f4:	00 20       	and	r0, r0
 2f6:	1a f4       	brpl	.+6      	; 0x2fe <__divmodhi4_exit>

000002f8 <__divmodhi4_neg2>:
 2f8:	70 95       	com	r23
 2fa:	61 95       	neg	r22
 2fc:	7f 4f       	sbci	r23, 0xFF	; 255

000002fe <__divmodhi4_exit>:
 2fe:	08 95       	ret

00000300 <__divmodhi4_neg1>:
 300:	f6 f7       	brtc	.-4      	; 0x2fe <__divmodhi4_exit>
 302:	90 95       	com	r25
 304:	81 95       	neg	r24
 306:	9f 4f       	sbci	r25, 0xFF	; 255
 308:	08 95       	ret

0000030a <__udivmodhi4>:
 30a:	aa 1b       	sub	r26, r26
 30c:	bb 1b       	sub	r27, r27
 30e:	51 e1       	ldi	r21, 0x11	; 17
 310:	07 c0       	rjmp	.+14     	; 0x320 <__udivmodhi4_ep>

00000312 <__udivmodhi4_loop>:
 312:	aa 1f       	adc	r26, r26
 314:	bb 1f       	adc	r27, r27
 316:	a6 17       	cp	r26, r22
 318:	b7 07       	cpc	r27, r23
 31a:	10 f0       	brcs	.+4      	; 0x320 <__udivmodhi4_ep>
 31c:	a6 1b       	sub	r26, r22
 31e:	b7 0b       	sbc	r27, r23

00000320 <__udivmodhi4_ep>:
 320:	88 1f       	adc	r24, r24
 322:	99 1f       	adc	r25, r25
 324:	5a 95       	dec	r21
 326:	a9 f7       	brne	.-22     	; 0x312 <__udivmodhi4_loop>
 328:	80 95       	com	r24
 32a:	90 95       	com	r25
 32c:	bc 01       	movw	r22, r24
 32e:	cd 01       	movw	r24, r26
 330:	08 95       	ret

00000332 <_exit>:
 332:	f8 94       	cli

00000334 <__stop_program>:
 334:	ff cf       	rjmp	.-2      	; 0x334 <__stop_program>
