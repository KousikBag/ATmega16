
Practical_44.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003ba  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000058  00800060  000003ba  0000042e  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  0000042e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000b1  00000000  00000000  0000044e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000051c  00000000  00000000  000004ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000025a  00000000  00000000  00000a1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000003c7  00000000  00000000  00000c75  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000a0  00000000  00000000  0000103c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000012a  00000000  00000000  000010dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000258  00000000  00000000  00001206  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000a8  00000000  00000000  0000145e  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea eb       	ldi	r30, 0xBA	; 186
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 3b       	cpi	r26, 0xB8	; 184
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 2c 01 	call	0x258	; 0x258 <main>
  8a:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <clr>:
  return 0;
}

/////////////////////////////////
void clr()
{
  92:	e6 e7       	ldi	r30, 0x76	; 118
  94:	f0 e0       	ldi	r31, 0x00	; 0
  for(int i4=0;i4<33;i4++)
  {
    ar[i4]=0;
  96:	11 92       	st	Z+, r1
  98:	11 92       	st	Z+, r1
}

/////////////////////////////////
void clr()
{
  for(int i4=0;i4<33;i4++)
  9a:	80 e0       	ldi	r24, 0x00	; 0
  9c:	e8 3b       	cpi	r30, 0xB8	; 184
  9e:	f8 07       	cpc	r31, r24
  a0:	d1 f7       	brne	.-12     	; 0x96 <clr+0x4>
  {
    ar[i4]=0;
  }
}
  a2:	08 95       	ret

000000a4 <__vector_1>:
//////////////////////////////////

////////////////////////////////////

 ISR(INT0_vect)//interrup service routine
 {
  a4:	1f 92       	push	r1
  a6:	0f 92       	push	r0
  a8:	0f b6       	in	r0, 0x3f	; 63
  aa:	0f 92       	push	r0
  ac:	11 24       	eor	r1, r1
  ae:	2f 93       	push	r18
  b0:	3f 93       	push	r19
  b2:	5f 93       	push	r21
  b4:	6f 93       	push	r22
  b6:	7f 93       	push	r23
  b8:	8f 93       	push	r24
  ba:	9f 93       	push	r25
  bc:	af 93       	push	r26
  be:	bf 93       	push	r27
  c0:	ef 93       	push	r30
  c2:	ff 93       	push	r31
   if(TCNT1>19000)
  c4:	8c b5       	in	r24, 0x2c	; 44
  c6:	9d b5       	in	r25, 0x2d	; 45
  c8:	89 53       	subi	r24, 0x39	; 57
  ca:	9a 44       	sbci	r25, 0x4A	; 74
  cc:	20 f0       	brcs	.+8      	; 0xd6 <__vector_1+0x32>
   {
     i=0;
  ce:	10 92 61 00 	sts	0x0061, r1
  d2:	10 92 60 00 	sts	0x0060, r1
   }
 ar[i]=((TCNT1)/2000);
  d6:	20 91 60 00 	lds	r18, 0x0060
  da:	30 91 61 00 	lds	r19, 0x0061
  de:	8c b5       	in	r24, 0x2c	; 44
  e0:	9d b5       	in	r25, 0x2d	; 45
  e2:	f9 01       	movw	r30, r18
  e4:	ee 0f       	add	r30, r30
  e6:	ff 1f       	adc	r31, r31
  e8:	ea 58       	subi	r30, 0x8A	; 138
  ea:	ff 4f       	sbci	r31, 0xFF	; 255
  ec:	60 ed       	ldi	r22, 0xD0	; 208
  ee:	77 e0       	ldi	r23, 0x07	; 7
  f0:	0e 94 b4 01 	call	0x368	; 0x368 <__udivmodhi4>
  f4:	71 83       	std	Z+1, r23	; 0x01
  f6:	60 83       	st	Z, r22
 TCNT1=0;
  f8:	1d bc       	out	0x2d, r1	; 45
  fa:	1c bc       	out	0x2c, r1	; 44
 i++;
  fc:	2f 5f       	subi	r18, 0xFF	; 255
  fe:	3f 4f       	sbci	r19, 0xFF	; 255
 100:	30 93 61 00 	sts	0x0061, r19
 104:	20 93 60 00 	sts	0x0060, r18
 d++;
 108:	80 91 64 00 	lds	r24, 0x0064
 10c:	90 91 65 00 	lds	r25, 0x0065
 110:	01 96       	adiw	r24, 0x01	; 1
 112:	90 93 65 00 	sts	0x0065, r25
 116:	80 93 64 00 	sts	0x0064, r24
}
 11a:	ff 91       	pop	r31
 11c:	ef 91       	pop	r30
 11e:	bf 91       	pop	r27
 120:	af 91       	pop	r26
 122:	9f 91       	pop	r25
 124:	8f 91       	pop	r24
 126:	7f 91       	pop	r23
 128:	6f 91       	pop	r22
 12a:	5f 91       	pop	r21
 12c:	3f 91       	pop	r19
 12e:	2f 91       	pop	r18
 130:	0f 90       	pop	r0
 132:	0f be       	out	0x3f, r0	; 63
 134:	0f 90       	pop	r0
 136:	1f 90       	pop	r1
 138:	18 95       	reti

0000013a <power>:
////////////////////////////


////////////////////////////////
int power(int a1, int b1)
{
 13a:	61 15       	cp	r22, r1
 13c:	71 05       	cpc	r23, r1
 13e:	19 f4       	brne	.+6      	; 0x146 <power+0xc>
 140:	21 e0       	ldi	r18, 0x01	; 1
 142:	30 e0       	ldi	r19, 0x00	; 0
 144:	12 c0       	rjmp	.+36     	; 0x16a <power+0x30>
 146:	41 e0       	ldi	r20, 0x01	; 1
 148:	50 e0       	ldi	r21, 0x00	; 0
 14a:	21 e0       	ldi	r18, 0x01	; 1
 14c:	30 e0       	ldi	r19, 0x00	; 0
 14e:	0a c0       	rjmp	.+20     	; 0x164 <power+0x2a>
	}
	else
	{
		for(int i3=1;i3<=b1;i3++)
		{
			c1=c1*a1;
 150:	f9 01       	movw	r30, r18
 152:	e8 9f       	mul	r30, r24
 154:	90 01       	movw	r18, r0
 156:	e9 9f       	mul	r30, r25
 158:	30 0d       	add	r19, r0
 15a:	f8 9f       	mul	r31, r24
 15c:	30 0d       	add	r19, r0
 15e:	11 24       	eor	r1, r1
	{
		return 1;
	}
	else
	{
		for(int i3=1;i3<=b1;i3++)
 160:	4f 5f       	subi	r20, 0xFF	; 255
 162:	5f 4f       	sbci	r21, 0xFF	; 255
 164:	64 17       	cp	r22, r20
 166:	75 07       	cpc	r23, r21
 168:	9c f7       	brge	.-26     	; 0x150 <power+0x16>
			c1=c1*a1;
		}
		return c1;
	}

}
 16a:	c9 01       	movw	r24, r18
 16c:	08 95       	ret

0000016e <int_tx>:
//////////////////////////////////

///////////////////////////////////
void int_tx(int data)
{
 16e:	af 92       	push	r10
 170:	bf 92       	push	r11
 172:	cf 92       	push	r12
 174:	df 92       	push	r13
 176:	ef 92       	push	r14
 178:	ff 92       	push	r15
 17a:	0f 93       	push	r16
 17c:	1f 93       	push	r17
 17e:	df 93       	push	r29
 180:	cf 93       	push	r28
 182:	cd b7       	in	r28, 0x3d	; 61
 184:	de b7       	in	r29, 0x3e	; 62
 186:	2a 97       	sbiw	r28, 0x0a	; 10
 188:	0f b6       	in	r0, 0x3f	; 63
 18a:	f8 94       	cli
 18c:	de bf       	out	0x3e, r29	; 62
 18e:	0f be       	out	0x3f, r0	; 63
 190:	cd bf       	out	0x3d, r28	; 61
 192:	8c 01       	movw	r16, r24
  int wc=0;
  unsigned char ulta[5];
  unsigned char sidha[5];
  int r=0,j1=0,i1=0;
  if(data==0)
 194:	00 97       	sbiw	r24, 0x00	; 0
 196:	29 f4       	brne	.+10     	; 0x1a2 <int_tx+0x34>
 while((UCSRA&0x80)==0);
 return UDR;
}
void usart_send(char send)
{
  while((UCSRA&0x20)==0);
 198:	5d 9b       	sbis	0x0b, 5	; 11
 19a:	fe cf       	rjmp	.-4      	; 0x198 <int_tx+0x2a>
  UDR=send;
 19c:	80 e3       	ldi	r24, 0x30	; 48
 19e:	8c b9       	out	0x0c, r24	; 12
 1a0:	4a c0       	rjmp	.+148    	; 0x236 <int_tx+0xc8>
 1a2:	ee 24       	eor	r14, r14
 1a4:	ff 24       	eor	r15, r15

 while(data!=0)
 {
   r=data%10;
   data=data/10;
   ulta[i1]=r+48;
 1a6:	5e 01       	movw	r10, r28
 1a8:	08 94       	sec
 1aa:	a1 1c       	adc	r10, r1
 1ac:	b1 1c       	adc	r11, r1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1ae:	6c e2       	ldi	r22, 0x2C	; 44
 1b0:	c6 2e       	mov	r12, r22
 1b2:	61 e0       	ldi	r22, 0x01	; 1
 1b4:	d6 2e       	mov	r13, r22
    usart_send(48);
  }

 while(data!=0)
 {
   r=data%10;
 1b6:	c8 01       	movw	r24, r16
 1b8:	6a e0       	ldi	r22, 0x0A	; 10
 1ba:	70 e0       	ldi	r23, 0x00	; 0
 1bc:	0e 94 c8 01 	call	0x390	; 0x390 <__divmodhi4>
 1c0:	28 2f       	mov	r18, r24
   data=data/10;
 1c2:	c8 01       	movw	r24, r16
 1c4:	6a e0       	ldi	r22, 0x0A	; 10
 1c6:	70 e0       	ldi	r23, 0x00	; 0
 1c8:	0e 94 c8 01 	call	0x390	; 0x390 <__divmodhi4>
 1cc:	ab 01       	movw	r20, r22
 1ce:	8b 01       	movw	r16, r22
   ulta[i1]=r+48;
 1d0:	f5 01       	movw	r30, r10
 1d2:	ee 0d       	add	r30, r14
 1d4:	ff 1d       	adc	r31, r15
 1d6:	20 5d       	subi	r18, 0xD0	; 208
 1d8:	20 83       	st	Z, r18
    i1++;
 1da:	08 94       	sec
 1dc:	e1 1c       	adc	r14, r1
 1de:	f1 1c       	adc	r15, r1
 1e0:	88 ee       	ldi	r24, 0xE8	; 232
 1e2:	93 e0       	ldi	r25, 0x03	; 3
 1e4:	f6 01       	movw	r30, r12
 1e6:	31 97       	sbiw	r30, 0x01	; 1
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <int_tx+0x78>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1ea:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1ec:	d9 f7       	brne	.-10     	; 0x1e4 <int_tx+0x76>
  if(data==0)
  {
    usart_send(48);
  }

 while(data!=0)
 1ee:	45 2b       	or	r20, r21
 1f0:	11 f7       	brne	.-60     	; 0x1b6 <int_tx+0x48>
 1f2:	9e 01       	movw	r18, r28
 1f4:	2e 0d       	add	r18, r14
 1f6:	3f 1d       	adc	r19, r15
 1f8:	a0 e0       	ldi	r26, 0x00	; 0
 1fa:	b0 e0       	ldi	r27, 0x00	; 0
 1fc:	ae 01       	movw	r20, r28
 1fe:	4a 5f       	subi	r20, 0xFA	; 250
 200:	5f 4f       	sbci	r21, 0xFF	; 255
 202:	0a c0       	rjmp	.+20     	; 0x218 <int_tx+0xaa>
 }
  if(wc==1)
  {
  for(j1=0;j1<=(i1-1);j1++)
  {
   sidha[j1]=ulta[(i1-1)-j1];
 204:	ba 01       	movw	r22, r20
 206:	6a 0f       	add	r22, r26
 208:	7b 1f       	adc	r23, r27
 20a:	f9 01       	movw	r30, r18
 20c:	80 81       	ld	r24, Z
 20e:	fb 01       	movw	r30, r22
 210:	80 83       	st	Z, r24
   _delay_ms(100);
   wc=1;
 }
  if(wc==1)
  {
  for(j1=0;j1<=(i1-1);j1++)
 212:	11 96       	adiw	r26, 0x01	; 1
 214:	21 50       	subi	r18, 0x01	; 1
 216:	30 40       	sbci	r19, 0x00	; 0
 218:	ae 15       	cp	r26, r14
 21a:	bf 05       	cpc	r27, r15
 21c:	9c f3       	brlt	.-26     	; 0x204 <int_tx+0x96>
  {
   sidha[j1]=ulta[(i1-1)-j1];
  }
   sidha[j1]='\0';
 21e:	a4 0f       	add	r26, r20
 220:	b5 1f       	adc	r27, r21
 222:	1c 92       	st	X, r1
 224:	fa 01       	movw	r30, r20
 226:	04 c0       	rjmp	.+8      	; 0x230 <int_tx+0xc2>
 while((UCSRA&0x80)==0);
 return UDR;
}
void usart_send(char send)
{
  while((UCSRA&0x20)==0);
 228:	5d 9b       	sbis	0x0b, 5	; 11
 22a:	fe cf       	rjmp	.-4      	; 0x228 <int_tx+0xba>
  UDR=send;
 22c:	8c b9       	out	0x0c, r24	; 12
 22e:	31 96       	adiw	r30, 0x01	; 1
}
void usart_string(unsigned char *a)
{
    int i2=0;
	while(a[i2]!='\0')
 230:	80 81       	ld	r24, Z
 232:	88 23       	and	r24, r24
 234:	c9 f7       	brne	.-14     	; 0x228 <int_tx+0xba>
   sidha[j1]=ulta[(i1-1)-j1];
  }
   sidha[j1]='\0';
   usart_string(sidha);wc=0;
   }
}
 236:	2a 96       	adiw	r28, 0x0a	; 10
 238:	0f b6       	in	r0, 0x3f	; 63
 23a:	f8 94       	cli
 23c:	de bf       	out	0x3e, r29	; 62
 23e:	0f be       	out	0x3f, r0	; 63
 240:	cd bf       	out	0x3d, r28	; 61
 242:	cf 91       	pop	r28
 244:	df 91       	pop	r29
 246:	1f 91       	pop	r17
 248:	0f 91       	pop	r16
 24a:	ff 90       	pop	r15
 24c:	ef 90       	pop	r14
 24e:	df 90       	pop	r13
 250:	cf 90       	pop	r12
 252:	bf 90       	pop	r11
 254:	af 90       	pop	r10
 256:	08 95       	ret

00000258 <main>:
unsigned int i=0;
unsigned int arr[7];
unsigned int count=0;
unsigned int d=0,inc=0;
int main()
{
 258:	0f 93       	push	r16
 25a:	1f 93       	push	r17
 25c:	cf 93       	push	r28
 25e:	df 93       	push	r29


////////////////////////////////////////
void usart_init()
{
 UBRRL=77;
 260:	8d e4       	ldi	r24, 0x4D	; 77
 262:	89 b9       	out	0x09, r24	; 9
 UBRRH=0;
 264:	10 bc       	out	0x20, r1	; 32
 UCSRB=0x18;
 266:	88 e1       	ldi	r24, 0x18	; 24
 268:	8a b9       	out	0x0a, r24	; 10
 UCSRC=0x8e;
 26a:	8e e8       	ldi	r24, 0x8E	; 142
 26c:	80 bd       	out	0x20, r24	; 32
 26e:	80 e3       	ldi	r24, 0x30	; 48
 270:	95 e7       	ldi	r25, 0x75	; 117
 272:	01 97       	sbiw	r24, 0x01	; 1
 274:	f1 f7       	brne	.-4      	; 0x272 <main+0x1a>
   

     usart_init();
	  _delay_ms(10);
     
      DDRD &=~(1<<PD2); //I/P FOR INTERRUPT
 276:	8a 98       	cbi	0x11, 2	; 17
      TCNT1=0;
 278:	1d bc       	out	0x2d, r1	; 45
 27a:	1c bc       	out	0x2c, r1	; 44
	  TCCR1B=0x02;
 27c:	82 e0       	ldi	r24, 0x02	; 2
 27e:	8e bd       	out	0x2e, r24	; 46
	  MCUCR|=(1<<ISC01);   //Falling edge on INT0 triggers interrupt.
 280:	85 b7       	in	r24, 0x35	; 53
 282:	82 60       	ori	r24, 0x02	; 2
 284:	85 bf       	out	0x35, r24	; 53
      GICR|=(1<<INT0);     //Enable INT0 interrupt
 286:	8b b7       	in	r24, 0x3b	; 59
 288:	80 64       	ori	r24, 0x40	; 64
 28a:	8b bf       	out	0x3b, r24	; 59
	  sei();               // Enable global interrupts
 28c:	78 94       	sei
 28e:	60 e0       	ldi	r22, 0x00	; 0
 290:	70 e0       	ldi	r23, 0x00	; 0
      while(1)
        {
		          
		          for(int k=0;k<7;k++)
		          {
		             count=ar[23-k]*power(2,k)+count;
 292:	07 e1       	ldi	r16, 0x17	; 23
 294:	10 e0       	ldi	r17, 0x00	; 0
 296:	cc e2       	ldi	r28, 0x2C	; 44
 298:	d1 e0       	ldi	r29, 0x01	; 1
 29a:	2d c0       	rjmp	.+90     	; 0x2f6 <main+0x9e>
 29c:	f8 01       	movw	r30, r16
 29e:	e6 1b       	sub	r30, r22
 2a0:	f7 0b       	sbc	r31, r23
 2a2:	ee 0f       	add	r30, r30
 2a4:	ff 1f       	adc	r31, r31
 2a6:	ea 58       	subi	r30, 0x8A	; 138
 2a8:	ff 4f       	sbci	r31, 0xFF	; 255
 2aa:	01 90       	ld	r0, Z+
 2ac:	f0 81       	ld	r31, Z
 2ae:	e0 2d       	mov	r30, r0

////////////////////////////////
int power(int a1, int b1)
{
	int c1=1;
	if(b1==0)
 2b0:	61 15       	cp	r22, r1
 2b2:	71 05       	cpc	r23, r1
 2b4:	19 f4       	brne	.+6      	; 0x2bc <main+0x64>
 2b6:	41 e0       	ldi	r20, 0x01	; 1
 2b8:	50 e0       	ldi	r21, 0x00	; 0
 2ba:	0a c0       	rjmp	.+20     	; 0x2d0 <main+0x78>
 2bc:	41 e0       	ldi	r20, 0x01	; 1
 2be:	50 e0       	ldi	r21, 0x00	; 0
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	90 e0       	ldi	r25, 0x00	; 0
	}
	else
	{
		for(int i3=1;i3<=b1;i3++)
		{
			c1=c1*a1;
 2c4:	44 0f       	add	r20, r20
 2c6:	55 1f       	adc	r21, r21
	{
		return 1;
	}
	else
	{
		for(int i3=1;i3<=b1;i3++)
 2c8:	01 96       	adiw	r24, 0x01	; 1
 2ca:	68 17       	cp	r22, r24
 2cc:	79 07       	cpc	r23, r25
 2ce:	d4 f7       	brge	.-12     	; 0x2c4 <main+0x6c>
      while(1)
        {
		          
		          for(int k=0;k<7;k++)
		          {
		             count=ar[23-k]*power(2,k)+count;
 2d0:	4e 9f       	mul	r20, r30
 2d2:	90 01       	movw	r18, r0
 2d4:	4f 9f       	mul	r20, r31
 2d6:	30 0d       	add	r19, r0
 2d8:	5e 9f       	mul	r21, r30
 2da:	30 0d       	add	r19, r0
 2dc:	11 24       	eor	r1, r1
 2de:	80 91 62 00 	lds	r24, 0x0062
 2e2:	90 91 63 00 	lds	r25, 0x0063
 2e6:	82 0f       	add	r24, r18
 2e8:	93 1f       	adc	r25, r19
 2ea:	90 93 63 00 	sts	0x0063, r25
 2ee:	80 93 62 00 	sts	0x0062, r24
      GICR|=(1<<INT0);     //Enable INT0 interrupt
	  sei();               // Enable global interrupts
      while(1)
        {
		          
		          for(int k=0;k<7;k++)
 2f2:	6f 5f       	subi	r22, 0xFF	; 255
 2f4:	7f 4f       	sbci	r23, 0xFF	; 255
 2f6:	67 30       	cpi	r22, 0x07	; 7
 2f8:	71 05       	cpc	r23, r1
 2fa:	84 f2       	brlt	.-96     	; 0x29c <main+0x44>
 2fc:	e6 e7       	ldi	r30, 0x76	; 118
 2fe:	f0 e0       	ldi	r31, 0x00	; 0
/////////////////////////////////
void clr()
{
  for(int i4=0;i4<33;i4++)
  {
    ar[i4]=0;
 300:	11 92       	st	Z+, r1
 302:	11 92       	st	Z+, r1
}

/////////////////////////////////
void clr()
{
  for(int i4=0;i4<33;i4++)
 304:	80 e0       	ldi	r24, 0x00	; 0
 306:	e8 3b       	cpi	r30, 0xB8	; 184
 308:	f8 07       	cpc	r31, r24
 30a:	d1 f7       	brne	.-12     	; 0x300 <main+0xa8>
		             count=ar[23-k]*power(2,k)+count;
			        }
			        clr();

               
			    int_tx(count);
 30c:	80 91 62 00 	lds	r24, 0x0062
 310:	90 91 63 00 	lds	r25, 0x0063
 314:	0e 94 b7 00 	call	0x16e	; 0x16e <int_tx>
 318:	88 e8       	ldi	r24, 0x88	; 136
 31a:	93 e1       	ldi	r25, 0x13	; 19
 31c:	fe 01       	movw	r30, r28
 31e:	31 97       	sbiw	r30, 0x01	; 1
 320:	f1 f7       	brne	.-4      	; 0x31e <main+0xc6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 322:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 324:	d9 f7       	brne	.-10     	; 0x31c <main+0xc4>
				_delay_ms(500);
 count=0;
 326:	10 92 63 00 	sts	0x0063, r1
 32a:	10 92 62 00 	sts	0x0062, r1
 32e:	60 e0       	ldi	r22, 0x00	; 0
 330:	70 e0       	ldi	r23, 0x00	; 0
 332:	e1 cf       	rjmp	.-62     	; 0x2f6 <main+0x9e>

00000334 <usart_init>:



////////////////////////////////////////
void usart_init()
{
 334:	8d e4       	ldi	r24, 0x4D	; 77
 336:	89 b9       	out	0x09, r24	; 9
 UBRRL=77;
 UBRRH=0;
 338:	10 bc       	out	0x20, r1	; 32
 UCSRB=0x18;
 33a:	88 e1       	ldi	r24, 0x18	; 24
 33c:	8a b9       	out	0x0a, r24	; 10
 UCSRC=0x8e;
 33e:	8e e8       	ldi	r24, 0x8E	; 142
 340:	80 bd       	out	0x20, r24	; 32
}
 342:	08 95       	ret

00000344 <usart_rec>:
char usart_rec()
{
 344:	5f 9b       	sbis	0x0b, 7	; 11
 346:	fe cf       	rjmp	.-4      	; 0x344 <usart_rec>
 while((UCSRA&0x80)==0);
 return UDR;
 348:	8c b1       	in	r24, 0x0c	; 12
}
 34a:	08 95       	ret

0000034c <usart_send>:
void usart_send(char send)
{
 34c:	5d 9b       	sbis	0x0b, 5	; 11
 34e:	fe cf       	rjmp	.-4      	; 0x34c <usart_send>
  while((UCSRA&0x20)==0);
  UDR=send;
 350:	8c b9       	out	0x0c, r24	; 12
}
 352:	08 95       	ret

00000354 <usart_string>:
void usart_string(unsigned char *a)
{
 354:	fc 01       	movw	r30, r24
 356:	04 c0       	rjmp	.+8      	; 0x360 <usart_string+0xc>
 while((UCSRA&0x80)==0);
 return UDR;
}
void usart_send(char send)
{
  while((UCSRA&0x20)==0);
 358:	5d 9b       	sbis	0x0b, 5	; 11
 35a:	fe cf       	rjmp	.-4      	; 0x358 <usart_string+0x4>
  UDR=send;
 35c:	8c b9       	out	0x0c, r24	; 12
 35e:	31 96       	adiw	r30, 0x01	; 1
}
void usart_string(unsigned char *a)
{
    int i2=0;
	while(a[i2]!='\0')
 360:	80 81       	ld	r24, Z
 362:	88 23       	and	r24, r24
 364:	c9 f7       	brne	.-14     	; 0x358 <usart_string+0x4>
	{
		usart_send(a[i2]);
		i2++;
	}

}
 366:	08 95       	ret

00000368 <__udivmodhi4>:
 368:	aa 1b       	sub	r26, r26
 36a:	bb 1b       	sub	r27, r27
 36c:	51 e1       	ldi	r21, 0x11	; 17
 36e:	07 c0       	rjmp	.+14     	; 0x37e <__udivmodhi4_ep>

00000370 <__udivmodhi4_loop>:
 370:	aa 1f       	adc	r26, r26
 372:	bb 1f       	adc	r27, r27
 374:	a6 17       	cp	r26, r22
 376:	b7 07       	cpc	r27, r23
 378:	10 f0       	brcs	.+4      	; 0x37e <__udivmodhi4_ep>
 37a:	a6 1b       	sub	r26, r22
 37c:	b7 0b       	sbc	r27, r23

0000037e <__udivmodhi4_ep>:
 37e:	88 1f       	adc	r24, r24
 380:	99 1f       	adc	r25, r25
 382:	5a 95       	dec	r21
 384:	a9 f7       	brne	.-22     	; 0x370 <__udivmodhi4_loop>
 386:	80 95       	com	r24
 388:	90 95       	com	r25
 38a:	bc 01       	movw	r22, r24
 38c:	cd 01       	movw	r24, r26
 38e:	08 95       	ret

00000390 <__divmodhi4>:
 390:	97 fb       	bst	r25, 7
 392:	09 2e       	mov	r0, r25
 394:	07 26       	eor	r0, r23
 396:	0a d0       	rcall	.+20     	; 0x3ac <__divmodhi4_neg1>
 398:	77 fd       	sbrc	r23, 7
 39a:	04 d0       	rcall	.+8      	; 0x3a4 <__divmodhi4_neg2>
 39c:	e5 df       	rcall	.-54     	; 0x368 <__udivmodhi4>
 39e:	06 d0       	rcall	.+12     	; 0x3ac <__divmodhi4_neg1>
 3a0:	00 20       	and	r0, r0
 3a2:	1a f4       	brpl	.+6      	; 0x3aa <__divmodhi4_exit>

000003a4 <__divmodhi4_neg2>:
 3a4:	70 95       	com	r23
 3a6:	61 95       	neg	r22
 3a8:	7f 4f       	sbci	r23, 0xFF	; 255

000003aa <__divmodhi4_exit>:
 3aa:	08 95       	ret

000003ac <__divmodhi4_neg1>:
 3ac:	f6 f7       	brtc	.-4      	; 0x3aa <__divmodhi4_exit>
 3ae:	90 95       	com	r25
 3b0:	81 95       	neg	r24
 3b2:	9f 4f       	sbci	r25, 0xFF	; 255
 3b4:	08 95       	ret

000003b6 <_exit>:
 3b6:	f8 94       	cli

000003b8 <__stop_program>:
 3b8:	ff cf       	rjmp	.-2      	; 0x3b8 <__stop_program>
