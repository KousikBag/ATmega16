
Project_46.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000023a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e0  00800060  0000023a  000002ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  0000038e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000055  00000000  00000000  000003ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000645  00000000  00000000  00000403  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001a4  00000000  00000000  00000a48  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000003f3  00000000  00000000  00000bec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000060  00000000  00000000  00000fe0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000103  00000000  00000000  00001040  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000021e  00000000  00000000  00001143  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00001361  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e3       	ldi	r30, 0x3A	; 58
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 34       	cpi	r26, 0x40	; 64
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	a0 e4       	ldi	r26, 0x40	; 64
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 34       	cpi	r26, 0x40	; 64
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 63 00 	call	0xc6	; 0xc6 <main>
  8a:	0c 94 1b 01 	jmp	0x236	; 0x236 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <usart_init>:
#include<avr/io.h>
#include<util/delay.h>


void usart_init()
{
  92:	83 e3       	ldi	r24, 0x33	; 51
  94:	89 b9       	out	0x09, r24	; 9
 UBRRL=51;
 UBRRH=0;
  96:	10 bc       	out	0x20, r1	; 32
 UCSRB=0x18;
  98:	88 e1       	ldi	r24, 0x18	; 24
  9a:	8a b9       	out	0x0a, r24	; 10
 UCSRC=0x8e;
  9c:	8e e8       	ldi	r24, 0x8E	; 142
  9e:	80 bd       	out	0x20, r24	; 32
}
  a0:	08 95       	ret

000000a2 <usart_tx>:

void usart_tx(char send)
{
  a2:	5d 9b       	sbis	0x0b, 5	; 11
  a4:	fe cf       	rjmp	.-4      	; 0xa2 <usart_tx>
  while((UCSRA&0x20)==0);
  UDR=send;
  a6:	8c b9       	out	0x0c, r24	; 12
}
  a8:	08 95       	ret

000000aa <usart_str_tx>:
void usart_str_tx(unsigned char *a)
{
  aa:	fc 01       	movw	r30, r24
  ac:	04 c0       	rjmp	.+8      	; 0xb6 <usart_str_tx+0xc>
 UCSRC=0x8e;
}

void usart_tx(char send)
{
  while((UCSRA&0x20)==0);
  ae:	5d 9b       	sbis	0x0b, 5	; 11
  b0:	fe cf       	rjmp	.-4      	; 0xae <usart_str_tx+0x4>
  UDR=send;
  b2:	8c b9       	out	0x0c, r24	; 12
  b4:	31 96       	adiw	r30, 0x01	; 1
}
void usart_str_tx(unsigned char *a)
{
    int i=0;
	while(a[i]!='\0')
  b6:	80 81       	ld	r24, Z
  b8:	88 23       	and	r24, r24
  ba:	c9 f7       	brne	.-14     	; 0xae <usart_str_tx+0x4>
	{
		usart_tx(a[i]);
		i++;
	}
	
}
  bc:	08 95       	ret

000000be <usart_rx>:

char usart_rx()
{
  be:	5f 9b       	sbis	0x0b, 7	; 11
  c0:	fe cf       	rjmp	.-4      	; 0xbe <usart_rx>
 while((UCSRA&0x80)==0);
 return UDR;
  c2:	8c b1       	in	r24, 0x0c	; 12
}
  c4:	08 95       	ret

000000c6 <main>:

int main()
{
  c6:	8f ef       	ldi	r24, 0xFF	; 255
  c8:	84 bb       	out	0x14, r24	; 20
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  ca:	20 e2       	ldi	r18, 0x20	; 32
  cc:	3e e4       	ldi	r19, 0x4E	; 78
  ce:	c9 01       	movw	r24, r18
  d0:	01 97       	sbiw	r24, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <main+0xa>
#include<util/delay.h>


void usart_init()
{
 UBRRL=51;
  d4:	83 e3       	ldi	r24, 0x33	; 51
  d6:	89 b9       	out	0x09, r24	; 9
 UBRRH=0;
  d8:	10 bc       	out	0x20, r1	; 32
 UCSRB=0x18;
  da:	88 e1       	ldi	r24, 0x18	; 24
  dc:	8a b9       	out	0x0a, r24	; 10
 UCSRC=0x8e;
  de:	8e e8       	ldi	r24, 0x8E	; 142
  e0:	80 bd       	out	0x20, r24	; 32
  e2:	c9 01       	movw	r24, r18
  e4:	01 97       	sbiw	r24, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <main+0x1e>
  e8:	e0 e6       	ldi	r30, 0x60	; 96
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	04 c0       	rjmp	.+8      	; 0xf6 <main+0x30>
}

void usart_tx(char send)
{
  while((UCSRA&0x20)==0);
  ee:	5d 9b       	sbis	0x0b, 5	; 11
  f0:	fe cf       	rjmp	.-4      	; 0xee <main+0x28>
  UDR=send;
  f2:	8c b9       	out	0x0c, r24	; 12
  f4:	31 96       	adiw	r30, 0x01	; 1
}
void usart_str_tx(unsigned char *a)
{
    int i=0;
	while(a[i]!='\0')
  f6:	80 81       	ld	r24, Z
  f8:	88 23       	and	r24, r24
  fa:	c9 f7       	brne	.-14     	; 0xee <main+0x28>
  fc:	80 e1       	ldi	r24, 0x10	; 16
  fe:	97 e2       	ldi	r25, 0x27	; 39
 100:	28 ec       	ldi	r18, 0xC8	; 200
 102:	30 e0       	ldi	r19, 0x00	; 0
 104:	f9 01       	movw	r30, r18
 106:	31 97       	sbiw	r30, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <main+0x40>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 10a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 10c:	d9 f7       	brne	.-10     	; 0x104 <main+0x3e>
 10e:	e5 e6       	ldi	r30, 0x65	; 101
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	04 c0       	rjmp	.+8      	; 0x11c <main+0x56>
 UCSRC=0x8e;
}

void usart_tx(char send)
{
  while((UCSRA&0x20)==0);
 114:	5d 9b       	sbis	0x0b, 5	; 11
 116:	fe cf       	rjmp	.-4      	; 0x114 <main+0x4e>
  UDR=send;
 118:	8c b9       	out	0x0c, r24	; 12
 11a:	31 96       	adiw	r30, 0x01	; 1
}
void usart_str_tx(unsigned char *a)
{
    int i=0;
	while(a[i]!='\0')
 11c:	80 81       	ld	r24, Z
 11e:	88 23       	and	r24, r24
 120:	c9 f7       	brne	.-14     	; 0x114 <main+0x4e>
 122:	80 e1       	ldi	r24, 0x10	; 16
 124:	97 e2       	ldi	r25, 0x27	; 39
 126:	28 ec       	ldi	r18, 0xC8	; 200
 128:	30 e0       	ldi	r19, 0x00	; 0
 12a:	f9 01       	movw	r30, r18
 12c:	31 97       	sbiw	r30, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <main+0x66>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 130:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 132:	d9 f7       	brne	.-10     	; 0x12a <main+0x64>
 134:	e3 e7       	ldi	r30, 0x73	; 115
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	04 c0       	rjmp	.+8      	; 0x142 <main+0x7c>
 UCSRC=0x8e;
}

void usart_tx(char send)
{
  while((UCSRA&0x20)==0);
 13a:	5d 9b       	sbis	0x0b, 5	; 11
 13c:	fe cf       	rjmp	.-4      	; 0x13a <main+0x74>
  UDR=send;
 13e:	8c b9       	out	0x0c, r24	; 12
 140:	31 96       	adiw	r30, 0x01	; 1
}
void usart_str_tx(unsigned char *a)
{
    int i=0;
	while(a[i]!='\0')
 142:	80 81       	ld	r24, Z
 144:	88 23       	and	r24, r24
 146:	c9 f7       	brne	.-14     	; 0x13a <main+0x74>
 148:	80 e1       	ldi	r24, 0x10	; 16
 14a:	97 e2       	ldi	r25, 0x27	; 39
 14c:	28 ec       	ldi	r18, 0xC8	; 200
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	f9 01       	movw	r30, r18
 152:	31 97       	sbiw	r30, 0x01	; 1
 154:	f1 f7       	brne	.-4      	; 0x152 <main+0x8c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 156:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 158:	d9 f7       	brne	.-10     	; 0x150 <main+0x8a>
 15a:	e1 e8       	ldi	r30, 0x81	; 129
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	04 c0       	rjmp	.+8      	; 0x168 <main+0xa2>
 UCSRC=0x8e;
}

void usart_tx(char send)
{
  while((UCSRA&0x20)==0);
 160:	5d 9b       	sbis	0x0b, 5	; 11
 162:	fe cf       	rjmp	.-4      	; 0x160 <main+0x9a>
  UDR=send;
 164:	8c b9       	out	0x0c, r24	; 12
 166:	31 96       	adiw	r30, 0x01	; 1
}
void usart_str_tx(unsigned char *a)
{
    int i=0;
	while(a[i]!='\0')
 168:	80 81       	ld	r24, Z
 16a:	88 23       	and	r24, r24
 16c:	c9 f7       	brne	.-14     	; 0x160 <main+0x9a>
 16e:	8f ef       	ldi	r24, 0xFF	; 255
 170:	9f ef       	ldi	r25, 0xFF	; 255
 172:	28 ec       	ldi	r18, 0xC8	; 200
 174:	30 e0       	ldi	r19, 0x00	; 0
 176:	f9 01       	movw	r30, r18
 178:	31 97       	sbiw	r30, 0x01	; 1
 17a:	f1 f7       	brne	.-4      	; 0x178 <main+0xb2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 17c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 17e:	d9 f7       	brne	.-10     	; 0x176 <main+0xb0>
 180:	80 e0       	ldi	r24, 0x00	; 0
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	48 ec       	ldi	r20, 0xC8	; 200
 186:	50 e0       	ldi	r21, 0x00	; 0
    usart_tx(data);
    usart_str_tx("\r\n");

    if(data=='A')
    {
      PORTC=0b00000001;
 188:	61 e0       	ldi	r22, 0x01	; 1
 18a:	04 c0       	rjmp	.+8      	; 0x194 <main+0xce>
 UCSRC=0x8e;
}

void usart_tx(char send)
{
  while((UCSRA&0x20)==0);
 18c:	5d 9b       	sbis	0x0b, 5	; 11
 18e:	fe cf       	rjmp	.-4      	; 0x18c <main+0xc6>
  UDR=send;
 190:	ec b9       	out	0x0c, r30	; 12
{
    int i=0;
	while(a[i]!='\0')
	{
		usart_tx(a[i]);
		i++;
 192:	01 96       	adiw	r24, 0x01	; 1
  UDR=send;
}
void usart_str_tx(unsigned char *a)
{
    int i=0;
	while(a[i]!='\0')
 194:	fc 01       	movw	r30, r24
 196:	ef 55       	subi	r30, 0x5F	; 95
 198:	ff 4f       	sbci	r31, 0xFF	; 255
 19a:	e0 81       	ld	r30, Z
 19c:	ee 23       	and	r30, r30
 19e:	b1 f7       	brne	.-20     	; 0x18c <main+0xc6>
 1a0:	80 e1       	ldi	r24, 0x10	; 16
 1a2:	97 e2       	ldi	r25, 0x27	; 39
 1a4:	fa 01       	movw	r30, r20
 1a6:	31 97       	sbiw	r30, 0x01	; 1
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <main+0xe0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1aa:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1ac:	d9 f7       	brne	.-10     	; 0x1a4 <main+0xde>
 1ae:	ea ec       	ldi	r30, 0xCA	; 202
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	04 c0       	rjmp	.+8      	; 0x1bc <main+0xf6>
 UCSRC=0x8e;
}

void usart_tx(char send)
{
  while((UCSRA&0x20)==0);
 1b4:	5d 9b       	sbis	0x0b, 5	; 11
 1b6:	fe cf       	rjmp	.-4      	; 0x1b4 <main+0xee>
  UDR=send;
 1b8:	8c b9       	out	0x0c, r24	; 12
 1ba:	31 96       	adiw	r30, 0x01	; 1
}
void usart_str_tx(unsigned char *a)
{
    int i=0;
	while(a[i]!='\0')
 1bc:	80 81       	ld	r24, Z
 1be:	88 23       	and	r24, r24
 1c0:	c9 f7       	brne	.-14     	; 0x1b4 <main+0xee>
 1c2:	80 e1       	ldi	r24, 0x10	; 16
 1c4:	97 e2       	ldi	r25, 0x27	; 39
 1c6:	fa 01       	movw	r30, r20
 1c8:	31 97       	sbiw	r30, 0x01	; 1
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <main+0x102>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1cc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1ce:	d9 f7       	brne	.-10     	; 0x1c6 <main+0x100>
 1d0:	ea ed       	ldi	r30, 0xDA	; 218
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	04 c0       	rjmp	.+8      	; 0x1de <main+0x118>
 UCSRC=0x8e;
}

void usart_tx(char send)
{
  while((UCSRA&0x20)==0);
 1d6:	5d 9b       	sbis	0x0b, 5	; 11
 1d8:	fe cf       	rjmp	.-4      	; 0x1d6 <main+0x110>
  UDR=send;
 1da:	8c b9       	out	0x0c, r24	; 12
 1dc:	31 96       	adiw	r30, 0x01	; 1
}
void usart_str_tx(unsigned char *a)
{
    int i=0;
	while(a[i]!='\0')
 1de:	80 81       	ld	r24, Z
 1e0:	88 23       	and	r24, r24
 1e2:	c9 f7       	brne	.-14     	; 0x1d6 <main+0x110>
 1e4:	20 e0       	ldi	r18, 0x00	; 0
 1e6:	30 e0       	ldi	r19, 0x00	; 0
	
}

char usart_rx()
{
 while((UCSRA&0x80)==0);
 1e8:	5f 9b       	sbis	0x0b, 7	; 11
 1ea:	fe cf       	rjmp	.-4      	; 0x1e8 <main+0x122>
 return UDR;
 1ec:	8c b1       	in	r24, 0x0c	; 12
      _delay_ms(1000);
      usart_str_tx("GET https://api.thingspeak.com/channels/321484/fields/1.json?api_key=TFFK6K6RURDXDUVC&results=1\r\n");
      while(i!=21)
      {
      val=usart_rx();
      if(val==':')
 1ee:	8a 33       	cpi	r24, 0x3A	; 58
 1f0:	d9 f7       	brne	.-10     	; 0x1e8 <main+0x122>
      {
        i++;
 1f2:	2f 5f       	subi	r18, 0xFF	; 255
 1f4:	3f 4f       	sbci	r19, 0xFF	; 255
      usart_str_tx("AT+CIPSTART=\"TCP\",\"184.106.153.149\",80\r\n");
      _delay_ms(1000);
      usart_str_tx("AT+CIPSEND=97\r\n");
      _delay_ms(1000);
      usart_str_tx("GET https://api.thingspeak.com/channels/321484/fields/1.json?api_key=TFFK6K6RURDXDUVC&results=1\r\n");
      while(i!=21)
 1f6:	25 31       	cpi	r18, 0x15	; 21
 1f8:	31 05       	cpc	r19, r1
 1fa:	b1 f7       	brne	.-20     	; 0x1e8 <main+0x122>
	
}

char usart_rx()
{
 while((UCSRA&0x80)==0);
 1fc:	5f 9b       	sbis	0x0b, 7	; 11
 1fe:	fe cf       	rjmp	.-4      	; 0x1fc <main+0x136>
 return UDR;
 200:	8c b1       	in	r24, 0x0c	; 12
	
}

char usart_rx()
{
 while((UCSRA&0x80)==0);
 202:	5f 9b       	sbis	0x0b, 7	; 11
 204:	fe cf       	rjmp	.-4      	; 0x202 <main+0x13c>
 return UDR;
 206:	9c b1       	in	r25, 0x0c	; 12
 UCSRC=0x8e;
}

void usart_tx(char send)
{
  while((UCSRA&0x20)==0);
 208:	5d 9b       	sbis	0x0b, 5	; 11
 20a:	fe cf       	rjmp	.-4      	; 0x208 <main+0x142>
  UDR=send;
 20c:	9c b9       	out	0x0c, r25	; 12
 20e:	ec e3       	ldi	r30, 0x3C	; 60
 210:	f1 e0       	ldi	r31, 0x01	; 1
 212:	04 c0       	rjmp	.+8      	; 0x21c <main+0x156>
 UCSRC=0x8e;
}

void usart_tx(char send)
{
  while((UCSRA&0x20)==0);
 214:	5d 9b       	sbis	0x0b, 5	; 11
 216:	fe cf       	rjmp	.-4      	; 0x214 <main+0x14e>
  UDR=send;
 218:	8c b9       	out	0x0c, r24	; 12
 21a:	31 96       	adiw	r30, 0x01	; 1
}
void usart_str_tx(unsigned char *a)
{
    int i=0;
	while(a[i]!='\0')
 21c:	80 81       	ld	r24, Z
 21e:	88 23       	and	r24, r24
 220:	c9 f7       	brne	.-14     	; 0x214 <main+0x14e>
    val=usart_rx();
    data=usart_rx();
    usart_tx(data);
    usart_str_tx("\r\n");

    if(data=='A')
 222:	91 34       	cpi	r25, 0x41	; 65
 224:	11 f4       	brne	.+4      	; 0x22a <main+0x164>
    {
      PORTC=0b00000001;
 226:	65 bb       	out	0x15, r22	; 21
 228:	03 c0       	rjmp	.+6      	; 0x230 <main+0x16a>
    }
    else if(data=='a')
 22a:	91 36       	cpi	r25, 0x61	; 97
 22c:	09 f4       	brne	.+2      	; 0x230 <main+0x16a>
    {
        PORTC=0b00000000;
 22e:	15 ba       	out	0x15, r1	; 21
 230:	80 e0       	ldi	r24, 0x00	; 0
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	af cf       	rjmp	.-162    	; 0x194 <main+0xce>

00000236 <_exit>:
 236:	f8 94       	cli

00000238 <__stop_program>:
 238:	ff cf       	rjmp	.-2      	; 0x238 <__stop_program>
