
Practical_4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000122  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000176  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  00000196  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000013c  00000000  00000000  000001b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000d5  00000000  00000000  000002ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000136  00000000  00000000  000003c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  000004f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000ca  00000000  00000000  00000518  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000018  00000000  00000000  000005e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  000005fa  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e2       	ldi	r30, 0x22	; 34
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 8f 00 	jmp	0x11e	; 0x11e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <main>:
//convergence and Divergence
#define F_CPU 8000000UL
#include<avr/io.h>
#include<util/delay.h>
int main()
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  DDRC=0xFF;
  96:	8f ef       	ldi	r24, 0xFF	; 255
  98:	84 bb       	out	0x14, r24	; 20
  9a:	21 e0       	ldi	r18, 0x01	; 1
  9c:	30 e0       	ldi	r19, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9e:	c8 ec       	ldi	r28, 0xC8	; 200
  a0:	d0 e0       	ldi	r29, 0x00	; 0
  while(1)
  {
    for(int i=1;i<256;i=i*2)
	{
	  int j=128/i;
	  PORTC=i+j;
  a2:	80 e8       	ldi	r24, 0x80	; 128
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	b9 01       	movw	r22, r18
  a8:	0e 94 68 00 	call	0xd0	; 0xd0 <__divmodhi4>
  ac:	62 0f       	add	r22, r18
  ae:	65 bb       	out	0x15, r22	; 21
  b0:	80 e1       	ldi	r24, 0x10	; 16
  b2:	97 e2       	ldi	r25, 0x27	; 39
  b4:	fe 01       	movw	r30, r28
  b6:	31 97       	sbiw	r30, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <main+0x24>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  ba:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  bc:	d9 f7       	brne	.-10     	; 0xb4 <main+0x22>
int main()
{
  DDRC=0xFF;
  while(1)
  {
    for(int i=1;i<256;i=i*2)
  be:	22 0f       	add	r18, r18
  c0:	33 1f       	adc	r19, r19
  c2:	2f 3f       	cpi	r18, 0xFF	; 255
  c4:	31 05       	cpc	r19, r1
  c6:	69 f3       	breq	.-38     	; 0xa2 <main+0x10>
  c8:	64 f3       	brlt	.-40     	; 0xa2 <main+0x10>
  ca:	21 e0       	ldi	r18, 0x01	; 1
  cc:	30 e0       	ldi	r19, 0x00	; 0
  ce:	e9 cf       	rjmp	.-46     	; 0xa2 <main+0x10>

000000d0 <__divmodhi4>:
  d0:	97 fb       	bst	r25, 7
  d2:	09 2e       	mov	r0, r25
  d4:	07 26       	eor	r0, r23
  d6:	0a d0       	rcall	.+20     	; 0xec <__divmodhi4_neg1>
  d8:	77 fd       	sbrc	r23, 7
  da:	04 d0       	rcall	.+8      	; 0xe4 <__divmodhi4_neg2>
  dc:	0c d0       	rcall	.+24     	; 0xf6 <__udivmodhi4>
  de:	06 d0       	rcall	.+12     	; 0xec <__divmodhi4_neg1>
  e0:	00 20       	and	r0, r0
  e2:	1a f4       	brpl	.+6      	; 0xea <__divmodhi4_exit>

000000e4 <__divmodhi4_neg2>:
  e4:	70 95       	com	r23
  e6:	61 95       	neg	r22
  e8:	7f 4f       	sbci	r23, 0xFF	; 255

000000ea <__divmodhi4_exit>:
  ea:	08 95       	ret

000000ec <__divmodhi4_neg1>:
  ec:	f6 f7       	brtc	.-4      	; 0xea <__divmodhi4_exit>
  ee:	90 95       	com	r25
  f0:	81 95       	neg	r24
  f2:	9f 4f       	sbci	r25, 0xFF	; 255
  f4:	08 95       	ret

000000f6 <__udivmodhi4>:
  f6:	aa 1b       	sub	r26, r26
  f8:	bb 1b       	sub	r27, r27
  fa:	51 e1       	ldi	r21, 0x11	; 17
  fc:	07 c0       	rjmp	.+14     	; 0x10c <__udivmodhi4_ep>

000000fe <__udivmodhi4_loop>:
  fe:	aa 1f       	adc	r26, r26
 100:	bb 1f       	adc	r27, r27
 102:	a6 17       	cp	r26, r22
 104:	b7 07       	cpc	r27, r23
 106:	10 f0       	brcs	.+4      	; 0x10c <__udivmodhi4_ep>
 108:	a6 1b       	sub	r26, r22
 10a:	b7 0b       	sbc	r27, r23

0000010c <__udivmodhi4_ep>:
 10c:	88 1f       	adc	r24, r24
 10e:	99 1f       	adc	r25, r25
 110:	5a 95       	dec	r21
 112:	a9 f7       	brne	.-22     	; 0xfe <__udivmodhi4_loop>
 114:	80 95       	com	r24
 116:	90 95       	com	r25
 118:	bc 01       	movw	r22, r24
 11a:	cd 01       	movw	r24, r26
 11c:	08 95       	ret

0000011e <_exit>:
 11e:	f8 94       	cli

00000120 <__stop_program>:
 120:	ff cf       	rjmp	.-2      	; 0x120 <__stop_program>
