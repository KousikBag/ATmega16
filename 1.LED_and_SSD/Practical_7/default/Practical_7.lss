
Practical_7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000017a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  0000017a  000001ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  00000202  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000001b  00000000  00000000  00000222  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000002bd  00000000  00000000  0000023d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000114  00000000  00000000  000004fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000027d  00000000  00000000  0000060e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000020  00000000  00000000  0000088c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000ca  00000000  00000000  000008ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000150  00000000  00000000  00000976  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00000ac6  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e7       	ldi	r30, 0x7A	; 122
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a4 e7       	ldi	r26, 0x74	; 116
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 37       	cpi	r26, 0x74	; 116
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 bb 00 	jmp	0x176	; 0x176 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:

#define F_CPU 8000000UL
#include<avr/io.h>
#include<util/delay.h>
int main()
{
  92:	cf 92       	push	r12
  94:	df 92       	push	r13
  96:	ef 92       	push	r14
  98:	ff 92       	push	r15
  9a:	0f 93       	push	r16
  9c:	1f 93       	push	r17
  9e:	df 93       	push	r29
  a0:	cf 93       	push	r28
  a2:	cd b7       	in	r28, 0x3d	; 61
  a4:	de b7       	in	r29, 0x3e	; 62
  a6:	64 97       	sbiw	r28, 0x14	; 20
  a8:	0f b6       	in	r0, 0x3f	; 63
  aa:	f8 94       	cli
  ac:	de bf       	out	0x3e, r29	; 62
  ae:	0f be       	out	0x3f, r0	; 63
  b0:	cd bf       	out	0x3d, r28	; 61
  DDRA=0xFF;
  b2:	8f ef       	ldi	r24, 0xFF	; 255
  b4:	8a bb       	out	0x1a, r24	; 26
  DDRC=0xFF;
  b6:	84 bb       	out	0x14, r24	; 20
  int arr[10]={0b11111001,0b10100100,0b10110000,0b10011001,0b10010010,0b00000010,0b11111000,0b10000000,0b10010000,0b11000000};
  b8:	de 01       	movw	r26, r28
  ba:	11 96       	adiw	r26, 0x01	; 1
  bc:	e0 e6       	ldi	r30, 0x60	; 96
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	84 e1       	ldi	r24, 0x14	; 20
  c2:	01 90       	ld	r0, Z+
  c4:	0d 92       	st	X+, r0
  c6:	81 50       	subi	r24, 0x01	; 1
  c8:	e1 f7       	brne	.-8      	; 0xc2 <main+0x30>
  ca:	20 e0       	ldi	r18, 0x00	; 0
  cc:	30 e0       	ldi	r19, 0x00	; 0
  while(1)
   {
     for(int i=0;i<=9;i++)
	 {
           PORTC=0b00100000;
  ce:	a0 e2       	ldi	r26, 0x20	; 32
  d0:	ca 2e       	mov	r12, r26
		   PORTA=arr[i];
  d2:	be 01       	movw	r22, r28
  d4:	6f 5f       	subi	r22, 0xFF	; 255
  d6:	7f 4f       	sbci	r23, 0xFF	; 255
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  d8:	48 ec       	ldi	r20, 0xC8	; 200
  da:	50 e0       	ldi	r21, 0x00	; 0
		   _delay_ms(1000);
		   PORTC=0b00010000;
  dc:	f0 e1       	ldi	r31, 0x10	; 16
  de:	df 2e       	mov	r13, r31
		   PORTA=arr[i];
		   _delay_ms(1000);
		   PORTC=0b00001000;
  e0:	e8 e0       	ldi	r30, 0x08	; 8
  e2:	ee 2e       	mov	r14, r30
		   PORTA=arr[i];
		   _delay_ms(1000);
		   PORTC=0b00000100;
  e4:	94 e0       	ldi	r25, 0x04	; 4
  e6:	f9 2e       	mov	r15, r25
		   PORTA=arr[i];
		   _delay_ms(1000);
		   PORTC=0b00000010;
  e8:	02 e0       	ldi	r16, 0x02	; 2
		   PORTA=arr[i];
		   _delay_ms(1000);
		   PORTC=0b00000001;
  ea:	11 e0       	ldi	r17, 0x01	; 1
  int arr[10]={0b11111001,0b10100100,0b10110000,0b10011001,0b10010010,0b00000010,0b11111000,0b10000000,0b10010000,0b11000000};
  while(1)
   {
     for(int i=0;i<=9;i++)
	 {
           PORTC=0b00100000;
  ec:	c5 ba       	out	0x15, r12	; 21
		   PORTA=arr[i];
  ee:	f9 01       	movw	r30, r18
  f0:	ee 0f       	add	r30, r30
  f2:	ff 1f       	adc	r31, r31
  f4:	e6 0f       	add	r30, r22
  f6:	f7 1f       	adc	r31, r23
  f8:	e0 81       	ld	r30, Z
  fa:	eb bb       	out	0x1b, r30	; 27
  fc:	80 e1       	ldi	r24, 0x10	; 16
  fe:	97 e2       	ldi	r25, 0x27	; 39
 100:	da 01       	movw	r26, r20
 102:	11 97       	sbiw	r26, 0x01	; 1
 104:	f1 f7       	brne	.-4      	; 0x102 <main+0x70>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 106:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 108:	d9 f7       	brne	.-10     	; 0x100 <main+0x6e>
		   _delay_ms(1000);
		   PORTC=0b00010000;
 10a:	d5 ba       	out	0x15, r13	; 21
		   PORTA=arr[i];
 10c:	eb bb       	out	0x1b, r30	; 27
 10e:	80 e1       	ldi	r24, 0x10	; 16
 110:	97 e2       	ldi	r25, 0x27	; 39
 112:	da 01       	movw	r26, r20
 114:	11 97       	sbiw	r26, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <main+0x82>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 118:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 11a:	d9 f7       	brne	.-10     	; 0x112 <main+0x80>
		   _delay_ms(1000);
		   PORTC=0b00001000;
 11c:	e5 ba       	out	0x15, r14	; 21
		   PORTA=arr[i];
 11e:	eb bb       	out	0x1b, r30	; 27
 120:	80 e1       	ldi	r24, 0x10	; 16
 122:	97 e2       	ldi	r25, 0x27	; 39
 124:	da 01       	movw	r26, r20
 126:	11 97       	sbiw	r26, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <main+0x94>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 12a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 12c:	d9 f7       	brne	.-10     	; 0x124 <main+0x92>
		   _delay_ms(1000);
		   PORTC=0b00000100;
 12e:	f5 ba       	out	0x15, r15	; 21
		   PORTA=arr[i];
 130:	eb bb       	out	0x1b, r30	; 27
 132:	80 e1       	ldi	r24, 0x10	; 16
 134:	97 e2       	ldi	r25, 0x27	; 39
 136:	da 01       	movw	r26, r20
 138:	11 97       	sbiw	r26, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <main+0xa6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 13c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 13e:	d9 f7       	brne	.-10     	; 0x136 <main+0xa4>
		   _delay_ms(1000);
		   PORTC=0b00000010;
 140:	05 bb       	out	0x15, r16	; 21
		   PORTA=arr[i];
 142:	eb bb       	out	0x1b, r30	; 27
 144:	80 e1       	ldi	r24, 0x10	; 16
 146:	97 e2       	ldi	r25, 0x27	; 39
 148:	da 01       	movw	r26, r20
 14a:	11 97       	sbiw	r26, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <main+0xb8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 14e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 150:	d9 f7       	brne	.-10     	; 0x148 <main+0xb6>
		   _delay_ms(1000);
		   PORTC=0b00000001;
 152:	15 bb       	out	0x15, r17	; 21
		   PORTA=arr[i];
 154:	eb bb       	out	0x1b, r30	; 27
 156:	80 e1       	ldi	r24, 0x10	; 16
 158:	97 e2       	ldi	r25, 0x27	; 39
 15a:	fa 01       	movw	r30, r20
 15c:	31 97       	sbiw	r30, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <main+0xca>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 160:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 162:	d9 f7       	brne	.-10     	; 0x15a <main+0xc8>
  DDRA=0xFF;
  DDRC=0xFF;
  int arr[10]={0b11111001,0b10100100,0b10110000,0b10011001,0b10010010,0b00000010,0b11111000,0b10000000,0b10010000,0b11000000};
  while(1)
   {
     for(int i=0;i<=9;i++)
 164:	2f 5f       	subi	r18, 0xFF	; 255
 166:	3f 4f       	sbci	r19, 0xFF	; 255
 168:	2a 30       	cpi	r18, 0x0A	; 10
 16a:	31 05       	cpc	r19, r1
 16c:	0c f4       	brge	.+2      	; 0x170 <main+0xde>
 16e:	be cf       	rjmp	.-132    	; 0xec <main+0x5a>
 170:	20 e0       	ldi	r18, 0x00	; 0
 172:	30 e0       	ldi	r19, 0x00	; 0
 174:	bb cf       	rjmp	.-138    	; 0xec <main+0x5a>

00000176 <_exit>:
 176:	f8 94       	cli

00000178 <__stop_program>:
 178:	ff cf       	rjmp	.-2      	; 0x178 <__stop_program>
