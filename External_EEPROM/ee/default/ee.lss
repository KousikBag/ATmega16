
ee.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001be  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000212  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000084  00000000  00000000  00000232  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000035a  00000000  00000000  000002b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000017b  00000000  00000000  00000610  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000327  00000000  00000000  0000078b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000090  00000000  00000000  00000ab4  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000011e  00000000  00000000  00000b44  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000f9  00000000  00000000  00000c62  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  00000d5b  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee eb       	ldi	r30, 0xBE	; 190
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 af 00 	call	0x15e	; 0x15e <main>
  8a:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <TWI_Init>:



void TWI_Init (void)

{
  92:	11 b8       	out	0x01, r1	; 1

       //set_bit(TWCR,6);

       TWSR=0;

       TWBR=0x07;
  94:	87 e0       	ldi	r24, 0x07	; 7
  96:	80 b9       	out	0x00, r24	; 0

       TWCR|=(1<<TWEN);
  98:	86 b7       	in	r24, 0x36	; 54
  9a:	84 60       	ori	r24, 0x04	; 4
  9c:	86 bf       	out	0x36, r24	; 54

}
  9e:	08 95       	ret

000000a0 <TWI_Start>:



void TWI_Start (void)

{
  a0:	84 ea       	ldi	r24, 0xA4	; 164
  a2:	86 bf       	out	0x36, r24	; 54

       TWCR= (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);

       while (get_bit(TWCR,TWINT)==0)
  a4:	06 b6       	in	r0, 0x36	; 54
  a6:	07 fe       	sbrs	r0, 7
  a8:	fd cf       	rjmp	.-6      	; 0xa4 <TWI_Start+0x4>

       {

       }

}
  aa:	08 95       	ret

000000ac <TWI_Stop>:



void TWI_Stop (void)

{
  ac:	84 e9       	ldi	r24, 0x94	; 148
  ae:	86 bf       	out	0x36, r24	; 54

       TWCR=(1<<TWSTO)|(1<<TWEN)|(1<<TWINT);

}
  b0:	08 95       	ret

000000b2 <TWI_Write>:



void TWI_Write (char data)

{
  b2:	83 b9       	out	0x03, r24	; 3

       TWDR=data;

       TWCR= (1<<TWINT)|(1<<TWEN);
  b4:	84 e8       	ldi	r24, 0x84	; 132
  b6:	86 bf       	out	0x36, r24	; 54

       while (get_bit(TWCR,TWINT)==0)
  b8:	06 b6       	in	r0, 0x36	; 54
  ba:	07 fe       	sbrs	r0, 7
  bc:	fd cf       	rjmp	.-6      	; 0xb8 <TWI_Write+0x6>

       {

       }

}
  be:	08 95       	ret

000000c0 <TWI_Read_Nack>:



void TWI_Read_Nack (char* ptr) // The function argument is a pointer to a memory place in the MCU to store the received data in

{
  c0:	fc 01       	movw	r30, r24

       TWCR=(1<<TWINT)|(1<<TWEN);
  c2:	84 e8       	ldi	r24, 0x84	; 132
  c4:	86 bf       	out	0x36, r24	; 54

       while (get_bit(TWCR,TWINT)==0)
  c6:	06 b6       	in	r0, 0x36	; 54
  c8:	07 fe       	sbrs	r0, 7
  ca:	fd cf       	rjmp	.-6      	; 0xc6 <TWI_Read_Nack+0x6>

       {

       }

       *ptr=TWDR;
  cc:	83 b1       	in	r24, 0x03	; 3
  ce:	80 83       	st	Z, r24

}
  d0:	08 95       	ret

000000d2 <EEPROM_Write>:



void EEPROM_Write (char data, char address)

{
  d2:	98 2f       	mov	r25, r24

void TWI_Start (void)

{

       TWCR= (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  d4:	84 ea       	ldi	r24, 0xA4	; 164
  d6:	86 bf       	out	0x36, r24	; 54

       while (get_bit(TWCR,TWINT)==0)
  d8:	06 b6       	in	r0, 0x36	; 54
  da:	07 fe       	sbrs	r0, 7
  dc:	fd cf       	rjmp	.-6      	; 0xd8 <EEPROM_Write+0x6>

void TWI_Write (char data)

{

       TWDR=data;
  de:	88 ea       	ldi	r24, 0xA8	; 168
  e0:	83 b9       	out	0x03, r24	; 3

       TWCR= (1<<TWINT)|(1<<TWEN);
  e2:	84 e8       	ldi	r24, 0x84	; 132
  e4:	86 bf       	out	0x36, r24	; 54

       while (get_bit(TWCR,TWINT)==0)
  e6:	06 b6       	in	r0, 0x36	; 54
  e8:	07 fe       	sbrs	r0, 7
  ea:	fd cf       	rjmp	.-6      	; 0xe6 <EEPROM_Write+0x14>

void TWI_Write (char data)

{

       TWDR=data;
  ec:	63 b9       	out	0x03, r22	; 3

       TWCR= (1<<TWINT)|(1<<TWEN);
  ee:	84 e8       	ldi	r24, 0x84	; 132
  f0:	86 bf       	out	0x36, r24	; 54

       while (get_bit(TWCR,TWINT)==0)
  f2:	06 b6       	in	r0, 0x36	; 54
  f4:	07 fe       	sbrs	r0, 7
  f6:	fd cf       	rjmp	.-6      	; 0xf2 <EEPROM_Write+0x20>

void TWI_Write (char data)

{

       TWDR=data;
  f8:	93 b9       	out	0x03, r25	; 3

       TWCR= (1<<TWINT)|(1<<TWEN);
  fa:	84 e8       	ldi	r24, 0x84	; 132
  fc:	86 bf       	out	0x36, r24	; 54

       while (get_bit(TWCR,TWINT)==0)
  fe:	06 b6       	in	r0, 0x36	; 54
 100:	07 fe       	sbrs	r0, 7
 102:	fd cf       	rjmp	.-6      	; 0xfe <EEPROM_Write+0x2c>

void TWI_Stop (void)

{

       TWCR=(1<<TWSTO)|(1<<TWEN)|(1<<TWINT);
 104:	84 e9       	ldi	r24, 0x94	; 148
 106:	86 bf       	out	0x36, r24	; 54

       TWI_Write(data);

       TWI_Stop();

}
 108:	08 95       	ret

0000010a <EEPROM_Read>:

void EEPROM_Read (char address, char* ptr) // the function arguments are an address in the EEPROM to read from and a pointer to a memory place in the MCU to store the read data in

{
 10a:	98 2f       	mov	r25, r24
 10c:	fb 01       	movw	r30, r22

void TWI_Start (void)

{

       TWCR= (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
 10e:	84 ea       	ldi	r24, 0xA4	; 164
 110:	86 bf       	out	0x36, r24	; 54

       while (get_bit(TWCR,TWINT)==0)
 112:	06 b6       	in	r0, 0x36	; 54
 114:	07 fe       	sbrs	r0, 7
 116:	fd cf       	rjmp	.-6      	; 0x112 <EEPROM_Read+0x8>

void TWI_Write (char data)

{

       TWDR=data;
 118:	88 ea       	ldi	r24, 0xA8	; 168
 11a:	83 b9       	out	0x03, r24	; 3

       TWCR= (1<<TWINT)|(1<<TWEN);
 11c:	84 e8       	ldi	r24, 0x84	; 132
 11e:	86 bf       	out	0x36, r24	; 54

       while (get_bit(TWCR,TWINT)==0)
 120:	06 b6       	in	r0, 0x36	; 54
 122:	07 fe       	sbrs	r0, 7
 124:	fd cf       	rjmp	.-6      	; 0x120 <EEPROM_Read+0x16>

void TWI_Write (char data)

{

       TWDR=data;
 126:	93 b9       	out	0x03, r25	; 3

       TWCR= (1<<TWINT)|(1<<TWEN);
 128:	84 e8       	ldi	r24, 0x84	; 132
 12a:	86 bf       	out	0x36, r24	; 54

       while (get_bit(TWCR,TWINT)==0)
 12c:	06 b6       	in	r0, 0x36	; 54
 12e:	07 fe       	sbrs	r0, 7
 130:	fd cf       	rjmp	.-6      	; 0x12c <EEPROM_Read+0x22>

void TWI_Start (void)

{

       TWCR= (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
 132:	84 ea       	ldi	r24, 0xA4	; 164
 134:	86 bf       	out	0x36, r24	; 54

       while (get_bit(TWCR,TWINT)==0)
 136:	06 b6       	in	r0, 0x36	; 54
 138:	07 fe       	sbrs	r0, 7
 13a:	fd cf       	rjmp	.-6      	; 0x136 <EEPROM_Read+0x2c>

void TWI_Write (char data)

{

       TWDR=data;
 13c:	89 ea       	ldi	r24, 0xA9	; 169
 13e:	83 b9       	out	0x03, r24	; 3

       TWCR= (1<<TWINT)|(1<<TWEN);
 140:	84 e8       	ldi	r24, 0x84	; 132
 142:	86 bf       	out	0x36, r24	; 54

       while (get_bit(TWCR,TWINT)==0)
 144:	06 b6       	in	r0, 0x36	; 54
 146:	07 fe       	sbrs	r0, 7
 148:	fd cf       	rjmp	.-6      	; 0x144 <EEPROM_Read+0x3a>

void TWI_Read_Nack (char* ptr) // The function argument is a pointer to a memory place in the MCU to store the received data in

{

       TWCR=(1<<TWINT)|(1<<TWEN);
 14a:	84 e8       	ldi	r24, 0x84	; 132
 14c:	86 bf       	out	0x36, r24	; 54

       while (get_bit(TWCR,TWINT)==0)
 14e:	06 b6       	in	r0, 0x36	; 54
 150:	07 fe       	sbrs	r0, 7
 152:	fd cf       	rjmp	.-6      	; 0x14e <EEPROM_Read+0x44>

       {

       }

       *ptr=TWDR;
 154:	83 b1       	in	r24, 0x03	; 3
 156:	80 83       	st	Z, r24

void TWI_Stop (void)

{

       TWCR=(1<<TWSTO)|(1<<TWEN)|(1<<TWINT);
 158:	84 e9       	ldi	r24, 0x94	; 148
 15a:	86 bf       	out	0x36, r24	; 54
       TWI_Stop();




}
 15c:	08 95       	ret

0000015e <main>:



int main(void)

{
 15e:	df 92       	push	r13
 160:	ef 92       	push	r14
 162:	ff 92       	push	r15
 164:	0f 93       	push	r16
 166:	1f 93       	push	r17
 168:	df 93       	push	r29
 16a:	cf 93       	push	r28
 16c:	0f 92       	push	r0
 16e:	cd b7       	in	r28, 0x3d	; 61
 170:	de b7       	in	r29, 0x3e	; 62

       char R;

       DDRD=0b11111111;
 172:	8f ef       	ldi	r24, 0xFF	; 255
 174:	81 bb       	out	0x11, r24	; 17

{

       //set_bit(TWCR,6);

       TWSR=0;
 176:	11 b8       	out	0x01, r1	; 1

       TWBR=0x07;
 178:	87 e0       	ldi	r24, 0x07	; 7
 17a:	80 b9       	out	0x00, r24	; 0

       TWCR|=(1<<TWEN);
 17c:	86 b7       	in	r24, 0x36	; 54
 17e:	84 60       	ori	r24, 0x04	; 4
 180:	86 bf       	out	0x36, r24	; 54
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 182:	98 ec       	ldi	r25, 0xC8	; 200
 184:	e9 2e       	mov	r14, r25
 186:	f1 2c       	mov	r15, r1

              EEPROM_Write(0xE0,0x00);

              _delay_ms(1000); // You must allow suffcent delay for the EEPROM to complete the its internal write cycle

              EEPROM_Read(0x00,&R);
 188:	8e 01       	movw	r16, r28
 18a:	0f 5f       	subi	r16, 0xFF	; 255
 18c:	1f 4f       	sbci	r17, 0xFF	; 255

              if (R==0xE0)

              {

                     PORTD=0b01000000;
 18e:	80 e4       	ldi	r24, 0x40	; 64
 190:	d8 2e       	mov	r13, r24

       while(1)

       {

              EEPROM_Write(0xE0,0x00);
 192:	60 e0       	ldi	r22, 0x00	; 0
 194:	80 ee       	ldi	r24, 0xE0	; 224
 196:	0e 94 69 00 	call	0xd2	; 0xd2 <EEPROM_Write>
 19a:	80 e1       	ldi	r24, 0x10	; 16
 19c:	97 e2       	ldi	r25, 0x27	; 39
 19e:	f7 01       	movw	r30, r14
 1a0:	31 97       	sbiw	r30, 0x01	; 1
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <main+0x42>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1a4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1a6:	d9 f7       	brne	.-10     	; 0x19e <main+0x40>

              _delay_ms(1000); // You must allow suffcent delay for the EEPROM to complete the its internal write cycle

              EEPROM_Read(0x00,&R);
 1a8:	b8 01       	movw	r22, r16
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	0e 94 85 00 	call	0x10a	; 0x10a <EEPROM_Read>

              if (R==0xE0)
 1b0:	89 81       	ldd	r24, Y+1	; 0x01
 1b2:	80 3e       	cpi	r24, 0xE0	; 224
 1b4:	71 f7       	brne	.-36     	; 0x192 <main+0x34>

              {

                     PORTD=0b01000000;
 1b6:	d2 ba       	out	0x12, r13	; 18
 1b8:	ec cf       	rjmp	.-40     	; 0x192 <main+0x34>

000001ba <_exit>:
 1ba:	f8 94       	cli

000001bc <__stop_program>:
 1bc:	ff cf       	rjmp	.-2      	; 0x1bc <__stop_program>
