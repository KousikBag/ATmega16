
Practical_57.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000011c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000170  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000038  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000001d9  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000110  00000000  00000000  000003a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001b8  00000000  00000000  000004b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000040  00000000  00000000  0000066c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000eb  00000000  00000000  000006ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000060  00000000  00000000  00000797  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e1       	ldi	r30, 0x1C	; 28
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 52 00 	call	0xa4	; 0xa4 <main>
  8a:	0c 94 8c 00 	jmp	0x118	; 0x118 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <INTO_init>:
#include<util/delay.h>
#include<avr/interrupt.h>
void INTO_init();

void INTO_init()
{
  92:	8a 98       	cbi	0x11, 2	; 17
        DDRD &=~(1<<PD2);
        MCUCR|=(1<<ISC01);   //Falling edge on INT0 triggers interrupt.
  94:	85 b7       	in	r24, 0x35	; 53
  96:	82 60       	ori	r24, 0x02	; 2
  98:	85 bf       	out	0x35, r24	; 53
        GICR|=(1<<INT0);     //Enable INT0 interrupt
  9a:	8b b7       	in	r24, 0x3b	; 59
  9c:	80 64       	ori	r24, 0x40	; 64
  9e:	8b bf       	out	0x3b, r24	; 59
	    sei();               // Enable global interrupts
  a0:	78 94       	sei
}
  a2:	08 95       	ret

000000a4 <main>:
  

int main()
{
  a4:	8f ef       	ldi	r24, 0xFF	; 255
  a6:	84 bb       	out	0x14, r24	; 20
#include<avr/interrupt.h>
void INTO_init();

void INTO_init()
{
        DDRD &=~(1<<PD2);
  a8:	8a 98       	cbi	0x11, 2	; 17
        MCUCR|=(1<<ISC01);   //Falling edge on INT0 triggers interrupt.
  aa:	85 b7       	in	r24, 0x35	; 53
  ac:	82 60       	ori	r24, 0x02	; 2
  ae:	85 bf       	out	0x35, r24	; 53
        GICR|=(1<<INT0);     //Enable INT0 interrupt
  b0:	8b b7       	in	r24, 0x3b	; 59
  b2:	80 64       	ori	r24, 0x40	; 64
  b4:	8b bf       	out	0x3b, r24	; 59
	    sei();               // Enable global interrupts
  b6:	78 94       	sei
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  b8:	80 ea       	ldi	r24, 0xA0	; 160
  ba:	9f e0       	ldi	r25, 0x0F	; 15
  bc:	01 97       	sbiw	r24, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <main+0x18>
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <main+0x1c>

000000c2 <__vector_1>:




 ISR(INT0_vect)//interrup service routine
 {
  c2:	1f 92       	push	r1
  c4:	0f 92       	push	r0
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	0f 92       	push	r0
  ca:	11 24       	eor	r1, r1
  cc:	2f 93       	push	r18
  ce:	3f 93       	push	r19
  d0:	8f 93       	push	r24
  d2:	9f 93       	push	r25
  d4:	ef 93       	push	r30
  d6:	ff 93       	push	r31
   PORTC=0xFF;
  d8:	8f ef       	ldi	r24, 0xFF	; 255
  da:	85 bb       	out	0x15, r24	; 21
  dc:	80 e5       	ldi	r24, 0x50	; 80
  de:	93 ec       	ldi	r25, 0xC3	; 195
  e0:	24 e1       	ldi	r18, 0x14	; 20
  e2:	30 e0       	ldi	r19, 0x00	; 0
  e4:	f9 01       	movw	r30, r18
  e6:	31 97       	sbiw	r30, 0x01	; 1
  e8:	f1 f7       	brne	.-4      	; 0xe6 <__vector_1+0x24>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  ea:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  ec:	d9 f7       	brne	.-10     	; 0xe4 <__vector_1+0x22>
   _delay_ms(5000);
   PORTC=0X00;
  ee:	15 ba       	out	0x15, r1	; 21
  f0:	80 e5       	ldi	r24, 0x50	; 80
  f2:	93 ec       	ldi	r25, 0xC3	; 195
  f4:	24 e1       	ldi	r18, 0x14	; 20
  f6:	30 e0       	ldi	r19, 0x00	; 0
  f8:	f9 01       	movw	r30, r18
  fa:	31 97       	sbiw	r30, 0x01	; 1
  fc:	f1 f7       	brne	.-4      	; 0xfa <__vector_1+0x38>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  fe:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 100:	d9 f7       	brne	.-10     	; 0xf8 <__vector_1+0x36>
   _delay_ms(5000);
  				
 }
 102:	ff 91       	pop	r31
 104:	ef 91       	pop	r30
 106:	9f 91       	pop	r25
 108:	8f 91       	pop	r24
 10a:	3f 91       	pop	r19
 10c:	2f 91       	pop	r18
 10e:	0f 90       	pop	r0
 110:	0f be       	out	0x3f, r0	; 63
 112:	0f 90       	pop	r0
 114:	1f 90       	pop	r1
 116:	18 95       	reti

00000118 <_exit>:
 118:	f8 94       	cli

0000011a <__stop_program>:
 11a:	ff cf       	rjmp	.-2      	; 0x11a <__stop_program>
