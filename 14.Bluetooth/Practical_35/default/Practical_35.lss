
Practical_35.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000172  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000001c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000058  00000000  00000000  000001e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000037c  00000000  00000000  0000023e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000019a  00000000  00000000  000005ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000002f7  00000000  00000000  00000754  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000060  00000000  00000000  00000a4c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000102  00000000  00000000  00000aac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000002c8  00000000  00000000  00000bae  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000090  00000000  00000000  00000e76  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e7       	ldi	r30, 0x72	; 114
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 63 00 	call	0xc6	; 0xc6 <main>
  8a:	0c 94 b7 00 	jmp	0x16e	; 0x16e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <usart_init>:

#define F_CPU 8000000UL
#include<avr/io.h>
#include<util/delay.h>
void usart_init()
{
  92:	83 e3       	ldi	r24, 0x33	; 51
  94:	89 b9       	out	0x09, r24	; 9
 UBRRL=51;
 UBRRH=0;
  96:	10 bc       	out	0x20, r1	; 32
 UCSRB=0x18;
  98:	88 e1       	ldi	r24, 0x18	; 24
  9a:	8a b9       	out	0x0a, r24	; 10
 UCSRC=0x8e;
  9c:	8e e8       	ldi	r24, 0x8E	; 142
  9e:	80 bd       	out	0x20, r24	; 32
}
  a0:	08 95       	ret

000000a2 <usart_send>:

void usart_send(char send)
{
  a2:	5d 9b       	sbis	0x0b, 5	; 11
  a4:	fe cf       	rjmp	.-4      	; 0xa2 <usart_send>
  while((UCSRA&0x20)==0);
  UDR=send;
  a6:	8c b9       	out	0x0c, r24	; 12
}
  a8:	08 95       	ret

000000aa <usart_string>:
void usart_string(unsigned char *a)
{
  aa:	fc 01       	movw	r30, r24
  ac:	04 c0       	rjmp	.+8      	; 0xb6 <usart_string+0xc>
 UCSRC=0x8e;
}

void usart_send(char send)
{
  while((UCSRA&0x20)==0);
  ae:	5d 9b       	sbis	0x0b, 5	; 11
  b0:	fe cf       	rjmp	.-4      	; 0xae <usart_string+0x4>
  UDR=send;
  b2:	8c b9       	out	0x0c, r24	; 12
  b4:	31 96       	adiw	r30, 0x01	; 1
}
void usart_string(unsigned char *a)
{
    int i=0;
	while(a[i]!='\0')
  b6:	80 81       	ld	r24, Z
  b8:	88 23       	and	r24, r24
  ba:	c9 f7       	brne	.-14     	; 0xae <usart_string+0x4>
	{
		usart_send(a[i]);
		i++;
	}
	
}
  bc:	08 95       	ret

000000be <usart_rec>:

char usart_rec()
{
  be:	5f 9b       	sbis	0x0b, 7	; 11
  c0:	fe cf       	rjmp	.-4      	; 0xbe <usart_rec>
 while((UCSRA&0x80)==0);
 return UDR;
  c2:	8c b1       	in	r24, 0x0c	; 12
}
  c4:	08 95       	ret

000000c6 <main>:

int main()
{
  c6:	1f 93       	push	r17
  DDRC=0xFF;
  c8:	8f ef       	ldi	r24, 0xFF	; 255
  ca:	84 bb       	out	0x14, r24	; 20
#define F_CPU 8000000UL
#include<avr/io.h>
#include<util/delay.h>
void usart_init()
{
 UBRRL=51;
  cc:	83 e3       	ldi	r24, 0x33	; 51
  ce:	89 b9       	out	0x09, r24	; 9
 UBRRH=0;
  d0:	10 bc       	out	0x20, r1	; 32
 UCSRB=0x18;
  d2:	88 e1       	ldi	r24, 0x18	; 24
  d4:	8a b9       	out	0x0a, r24	; 10
 UCSRC=0x8e;
  d6:	8e e8       	ldi	r24, 0x8E	; 142
  d8:	80 bd       	out	0x20, r24	; 32
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  da:	80 e2       	ldi	r24, 0x20	; 32
  dc:	9e e4       	ldi	r25, 0x4E	; 78
  de:	01 97       	sbiw	r24, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <main+0x18>
			  PORTC=0b00001000;
			  _delay_ms(200);
		 }
		 else if(a=='R')
		 {
			  PORTC=0b00000010;
  e2:	60 e2       	ldi	r22, 0x20	; 32
  e4:	7e e4       	ldi	r23, 0x4E	; 78
  e6:	48 ec       	ldi	r20, 0xC8	; 200
  e8:	50 e0       	ldi	r21, 0x00	; 0
  ea:	12 e0       	ldi	r17, 0x02	; 2
			  PORTC=0b00000101;
			  _delay_ms(200);
		 }
		 else if(a=='L')
		 {
			  PORTC=0b00001000;
  ec:	b8 e0       	ldi	r27, 0x08	; 8
			  PORTC=0b00001010;
			  _delay_ms(200);
		 }
		  else if(a=='B')
		 {
			  PORTC=0b00000101;
  ee:	a5 e0       	ldi	r26, 0x05	; 5
	 {
	      a = usart_rec();
		  _delay_ms(10);
		 if(a=='F')
		 {
			  PORTC=0b00001010;
  f0:	3a e0       	ldi	r19, 0x0A	; 10
	
}

char usart_rec()
{
 while((UCSRA&0x80)==0);
  f2:	5f 9b       	sbis	0x0b, 7	; 11
  f4:	fe cf       	rjmp	.-4      	; 0xf2 <main+0x2c>
 return UDR;
  f6:	2c b1       	in	r18, 0x0c	; 12
  f8:	cb 01       	movw	r24, r22
  fa:	01 97       	sbiw	r24, 0x01	; 1
  fc:	f1 f7       	brne	.-4      	; 0xfa <main+0x34>
  char a;
       while(1)
	 {
	      a = usart_rec();
		  _delay_ms(10);
		 if(a=='F')
  fe:	26 34       	cpi	r18, 0x46	; 70
 100:	49 f4       	brne	.+18     	; 0x114 <main+0x4e>
		 {
			  PORTC=0b00001010;
 102:	35 bb       	out	0x15, r19	; 21
 104:	80 ed       	ldi	r24, 0xD0	; 208
 106:	97 e0       	ldi	r25, 0x07	; 7
 108:	fa 01       	movw	r30, r20
 10a:	31 97       	sbiw	r30, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <main+0x44>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 10e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 110:	d9 f7       	brne	.-10     	; 0x108 <main+0x42>
 112:	ef cf       	rjmp	.-34     	; 0xf2 <main+0x2c>
			  _delay_ms(200);
		 }
		  else if(a=='B')
 114:	22 34       	cpi	r18, 0x42	; 66
 116:	49 f4       	brne	.+18     	; 0x12a <main+0x64>
		 {
			  PORTC=0b00000101;
 118:	a5 bb       	out	0x15, r26	; 21
 11a:	80 ed       	ldi	r24, 0xD0	; 208
 11c:	97 e0       	ldi	r25, 0x07	; 7
 11e:	fa 01       	movw	r30, r20
 120:	31 97       	sbiw	r30, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <main+0x5a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 124:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 126:	d9 f7       	brne	.-10     	; 0x11e <main+0x58>
 128:	e4 cf       	rjmp	.-56     	; 0xf2 <main+0x2c>
			  _delay_ms(200);
		 }
		 else if(a=='L')
 12a:	2c 34       	cpi	r18, 0x4C	; 76
 12c:	49 f4       	brne	.+18     	; 0x140 <main+0x7a>
		 {
			  PORTC=0b00001000;
 12e:	b5 bb       	out	0x15, r27	; 21
 130:	80 ed       	ldi	r24, 0xD0	; 208
 132:	97 e0       	ldi	r25, 0x07	; 7
 134:	fa 01       	movw	r30, r20
 136:	31 97       	sbiw	r30, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <main+0x70>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 13a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 13c:	d9 f7       	brne	.-10     	; 0x134 <main+0x6e>
 13e:	d9 cf       	rjmp	.-78     	; 0xf2 <main+0x2c>
			  _delay_ms(200);
		 }
		 else if(a=='R')
 140:	22 35       	cpi	r18, 0x52	; 82
 142:	49 f4       	brne	.+18     	; 0x156 <main+0x90>
		 {
			  PORTC=0b00000010;
 144:	15 bb       	out	0x15, r17	; 21
 146:	80 ed       	ldi	r24, 0xD0	; 208
 148:	97 e0       	ldi	r25, 0x07	; 7
 14a:	fa 01       	movw	r30, r20
 14c:	31 97       	sbiw	r30, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <main+0x86>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 150:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 152:	d9 f7       	brne	.-10     	; 0x14a <main+0x84>
 154:	ce cf       	rjmp	.-100    	; 0xf2 <main+0x2c>
			  _delay_ms(200);
		 }
		 else if(a=='S')
 156:	23 35       	cpi	r18, 0x53	; 83
 158:	09 f0       	breq	.+2      	; 0x15c <main+0x96>
 15a:	cb cf       	rjmp	.-106    	; 0xf2 <main+0x2c>
		 {
			  PORTC=0b00000000;
 15c:	15 ba       	out	0x15, r1	; 21
 15e:	80 ed       	ldi	r24, 0xD0	; 208
 160:	97 e0       	ldi	r25, 0x07	; 7
 162:	fa 01       	movw	r30, r20
 164:	31 97       	sbiw	r30, 0x01	; 1
 166:	f1 f7       	brne	.-4      	; 0x164 <main+0x9e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 168:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 16a:	d9 f7       	brne	.-10     	; 0x162 <main+0x9c>
 16c:	c2 cf       	rjmp	.-124    	; 0xf2 <main+0x2c>

0000016e <_exit>:
 16e:	f8 94       	cli

00000170 <__stop_program>:
 170:	ff cf       	rjmp	.-2      	; 0x170 <__stop_program>
